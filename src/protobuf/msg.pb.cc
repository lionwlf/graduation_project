// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr login_request::login_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , pwd_(0){}
struct login_requestDefaultTypeInternal {
  constexpr login_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_requestDefaultTypeInternal() {}
  union {
    login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_requestDefaultTypeInternal _login_request_default_instance_;
constexpr login_reply::login_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(0){}
struct login_replyDefaultTypeInternal {
  constexpr login_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~login_replyDefaultTypeInternal() {}
  union {
    login_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT login_replyDefaultTypeInternal _login_reply_default_instance_;
constexpr regists_request::regists_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_num_(int64_t{0})
  , pwd_(0){}
struct regists_requestDefaultTypeInternal {
  constexpr regists_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~regists_requestDefaultTypeInternal() {}
  union {
    regists_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT regists_requestDefaultTypeInternal _regists_request_default_instance_;
constexpr regists_reply::regists_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(0){}
struct regists_replyDefaultTypeInternal {
  constexpr regists_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~regists_replyDefaultTypeInternal() {}
  union {
    regists_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT regists_replyDefaultTypeInternal _regists_reply_default_instance_;
constexpr loginout_request::loginout_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0){}
struct loginout_requestDefaultTypeInternal {
  constexpr loginout_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~loginout_requestDefaultTypeInternal() {}
  union {
    loginout_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT loginout_requestDefaultTypeInternal _loginout_request_default_instance_;
constexpr recharge_request::recharge_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , money_(0)
  , serial_num_(0){}
struct recharge_requestDefaultTypeInternal {
  constexpr recharge_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_requestDefaultTypeInternal() {}
  union {
    recharge_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_requestDefaultTypeInternal _recharge_request_default_instance_;
constexpr recharge_reply::recharge_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errno_id_(false){}
struct recharge_replyDefaultTypeInternal {
  constexpr recharge_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~recharge_replyDefaultTypeInternal() {}
  union {
    recharge_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT recharge_replyDefaultTypeInternal _recharge_reply_default_instance_;
constexpr findpwd_request::findpwd_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phone_num_(int64_t{0})
  , id_(0)
  , serial_num_(0){}
struct findpwd_requestDefaultTypeInternal {
  constexpr findpwd_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~findpwd_requestDefaultTypeInternal() {}
  union {
    findpwd_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT findpwd_requestDefaultTypeInternal _findpwd_request_default_instance_;
constexpr findpwd_reply::findpwd_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(0){}
struct findpwd_replyDefaultTypeInternal {
  constexpr findpwd_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~findpwd_replyDefaultTypeInternal() {}
  union {
    findpwd_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT findpwd_replyDefaultTypeInternal _findpwd_reply_default_instance_;
constexpr searchtickets_request::searchtickets_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : st_ar_place_(0)
  , day_(0)
  , id_(0)
  , serial_num_(0){}
struct searchtickets_requestDefaultTypeInternal {
  constexpr searchtickets_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchtickets_requestDefaultTypeInternal() {}
  union {
    searchtickets_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchtickets_requestDefaultTypeInternal _searchtickets_request_default_instance_;
constexpr Pick_msg::Pick_msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(0)
  , st_ar_place_(0)
  , st_ar_time_(0)
  , price_(0)
  , tks_left_(0){}
struct Pick_msgDefaultTypeInternal {
  constexpr Pick_msgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pick_msgDefaultTypeInternal() {}
  union {
    Pick_msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pick_msgDefaultTypeInternal _Pick_msg_default_instance_;
constexpr searchtickets_reply::searchtickets_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tickets_(){}
struct searchtickets_replyDefaultTypeInternal {
  constexpr searchtickets_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~searchtickets_replyDefaultTypeInternal() {}
  union {
    searchtickets_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT searchtickets_replyDefaultTypeInternal _searchtickets_reply_default_instance_;
constexpr bookticket_request::bookticket_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , cid_(0)
  , hope_col_(0)
  , serial_num_(0){}
struct bookticket_requestDefaultTypeInternal {
  constexpr bookticket_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~bookticket_requestDefaultTypeInternal() {}
  union {
    bookticket_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT bookticket_requestDefaultTypeInternal _bookticket_request_default_instance_;
constexpr bookticket_reply::bookticket_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(0){}
struct bookticket_replyDefaultTypeInternal {
  constexpr bookticket_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~bookticket_replyDefaultTypeInternal() {}
  union {
    bookticket_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT bookticket_replyDefaultTypeInternal _bookticket_reply_default_instance_;
constexpr cancelticket_request::cancelticket_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , cid_(0)
  , site_(0)
  , serial_num_(0)
  , room_(0){}
struct cancelticket_requestDefaultTypeInternal {
  constexpr cancelticket_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~cancelticket_requestDefaultTypeInternal() {}
  union {
    cancelticket_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT cancelticket_requestDefaultTypeInternal _cancelticket_request_default_instance_;
constexpr cancelticket_reply::cancelticket_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errno_id_(0){}
struct cancelticket_replyDefaultTypeInternal {
  constexpr cancelticket_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~cancelticket_replyDefaultTypeInternal() {}
  union {
    cancelticket_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT cancelticket_replyDefaultTypeInternal _cancelticket_reply_default_instance_;
constexpr personbook_request::personbook_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , serial_num_(0){}
struct personbook_requestDefaultTypeInternal {
  constexpr personbook_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~personbook_requestDefaultTypeInternal() {}
  union {
    personbook_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT personbook_requestDefaultTypeInternal _personbook_request_default_instance_;
constexpr Pick_msg2::Pick_msg2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(0)
  , st_ar_place_(0)
  , day_(0)
  , st_ar_time_(0)
  , price_(0)
  , site_(0)
  , iscancel_(false){}
struct Pick_msg2DefaultTypeInternal {
  constexpr Pick_msg2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pick_msg2DefaultTypeInternal() {}
  union {
    Pick_msg2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pick_msg2DefaultTypeInternal _Pick_msg2_default_instance_;
constexpr personbook_reply::personbook_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tickets_()
  , errno_id_(false){}
struct personbook_replyDefaultTypeInternal {
  constexpr personbook_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~personbook_replyDefaultTypeInternal() {}
  union {
    personbook_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT personbook_replyDefaultTypeInternal _personbook_reply_default_instance_;
constexpr citymodel_request::citymodel_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0)
  , serial_num_(0){}
struct citymodel_requestDefaultTypeInternal {
  constexpr citymodel_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~citymodel_requestDefaultTypeInternal() {}
  union {
    citymodel_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT citymodel_requestDefaultTypeInternal _citymodel_request_default_instance_;
constexpr citymodel_reply::citymodel_reply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct citymodel_replyDefaultTypeInternal {
  constexpr citymodel_replyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~citymodel_replyDefaultTypeInternal() {}
  union {
    citymodel_reply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT citymodel_replyDefaultTypeInternal _citymodel_reply_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_msg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_request, id_),
  PROTOBUF_FIELD_OFFSET(::login_request, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::login_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::login_reply, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::regists_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::regists_request, pwd_),
  PROTOBUF_FIELD_OFFSET(::regists_request, phone_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::regists_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::regists_reply, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::loginout_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::loginout_request, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::recharge_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::recharge_request, id_),
  PROTOBUF_FIELD_OFFSET(::recharge_request, money_),
  PROTOBUF_FIELD_OFFSET(::recharge_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::recharge_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::recharge_reply, errno_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::findpwd_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::findpwd_request, id_),
  PROTOBUF_FIELD_OFFSET(::findpwd_request, phone_num_),
  PROTOBUF_FIELD_OFFSET(::findpwd_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::findpwd_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::findpwd_reply, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::searchtickets_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::searchtickets_request, st_ar_place_),
  PROTOBUF_FIELD_OFFSET(::searchtickets_request, day_),
  PROTOBUF_FIELD_OFFSET(::searchtickets_request, id_),
  PROTOBUF_FIELD_OFFSET(::searchtickets_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pick_msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Pick_msg, cid_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg, st_ar_place_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg, st_ar_time_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg, price_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg, tks_left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::searchtickets_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::searchtickets_reply, tickets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bookticket_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bookticket_request, id_),
  PROTOBUF_FIELD_OFFSET(::bookticket_request, cid_),
  PROTOBUF_FIELD_OFFSET(::bookticket_request, hope_col_),
  PROTOBUF_FIELD_OFFSET(::bookticket_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bookticket_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bookticket_reply, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, id_),
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, cid_),
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, site_),
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, serial_num_),
  PROTOBUF_FIELD_OFFSET(::cancelticket_request, room_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cancelticket_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cancelticket_reply, errno_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::personbook_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::personbook_request, id_),
  PROTOBUF_FIELD_OFFSET(::personbook_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, cid_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, st_ar_place_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, day_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, st_ar_time_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, price_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, site_),
  PROTOBUF_FIELD_OFFSET(::Pick_msg2, iscancel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::personbook_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::personbook_reply, errno_id_),
  PROTOBUF_FIELD_OFFSET(::personbook_reply, tickets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::citymodel_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::citymodel_request, id_),
  PROTOBUF_FIELD_OFFSET(::citymodel_request, serial_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::citymodel_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::citymodel_reply, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::login_request)},
  { 8, -1, -1, sizeof(::login_reply)},
  { 15, -1, -1, sizeof(::regists_request)},
  { 23, -1, -1, sizeof(::regists_reply)},
  { 30, -1, -1, sizeof(::loginout_request)},
  { 37, -1, -1, sizeof(::recharge_request)},
  { 46, -1, -1, sizeof(::recharge_reply)},
  { 53, -1, -1, sizeof(::findpwd_request)},
  { 62, -1, -1, sizeof(::findpwd_reply)},
  { 69, -1, -1, sizeof(::searchtickets_request)},
  { 79, -1, -1, sizeof(::Pick_msg)},
  { 90, -1, -1, sizeof(::searchtickets_reply)},
  { 97, -1, -1, sizeof(::bookticket_request)},
  { 107, -1, -1, sizeof(::bookticket_reply)},
  { 114, -1, -1, sizeof(::cancelticket_request)},
  { 125, -1, -1, sizeof(::cancelticket_reply)},
  { 132, -1, -1, sizeof(::personbook_request)},
  { 140, -1, -1, sizeof(::Pick_msg2)},
  { 153, -1, -1, sizeof(::personbook_reply)},
  { 161, -1, -1, sizeof(::citymodel_request)},
  { 169, -1, -1, sizeof(::citymodel_reply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_login_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_login_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_regists_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_regists_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_loginout_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_recharge_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_recharge_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_findpwd_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_findpwd_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_searchtickets_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pick_msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_searchtickets_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_bookticket_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_bookticket_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cancelticket_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cancelticket_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_personbook_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Pick_msg2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_personbook_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_citymodel_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_citymodel_reply_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\"(\n\rlogin_request\022\n\n\002id\030\001 \001(\005"
  "\022\013\n\003pwd\030\002 \001(\005\"\032\n\013login_reply\022\013\n\003msg\030\001 \001("
  "\005\"1\n\017regists_request\022\013\n\003pwd\030\001 \001(\005\022\021\n\tpho"
  "ne_num\030\002 \001(\003\"\034\n\rregists_reply\022\013\n\003msg\030\001 \001"
  "(\005\"\036\n\020loginout_request\022\n\n\002id\030\001 \001(\005\"A\n\020re"
  "charge_request\022\n\n\002id\030\001 \001(\005\022\r\n\005money\030\002 \001("
  "\005\022\022\n\nserial_num\030\003 \001(\005\"\"\n\016recharge_reply\022"
  "\020\n\010errno_id\030\001 \001(\010\"D\n\017findpwd_request\022\n\n\002"
  "id\030\001 \001(\005\022\021\n\tphone_num\030\002 \001(\003\022\022\n\nserial_nu"
  "m\030\003 \001(\005\"\034\n\rfindpwd_reply\022\013\n\003msg\030\001 \001(\005\"Y\n"
  "\025searchtickets_request\022\023\n\013st_ar_place\030\001 "
  "\001(\005\022\013\n\003day\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\022\n\nserial_n"
  "um\030\004 \001(\005\"a\n\010Pick_msg\022\013\n\003cid\030\001 \001(\005\022\023\n\013st_"
  "ar_place\030\002 \001(\005\022\022\n\nst_ar_time\030\003 \001(\005\022\r\n\005pr"
  "ice\030\004 \001(\005\022\020\n\010tks_left\030\005 \001(\005\"1\n\023searchtic"
  "kets_reply\022\032\n\007tickets\030\002 \003(\0132\t.Pick_msg\"S"
  "\n\022bookticket_request\022\n\n\002id\030\001 \001(\005\022\013\n\003cid\030"
  "\002 \001(\005\022\020\n\010hope_col\030\003 \001(\005\022\022\n\nserial_num\030\004 "
  "\001(\005\"\037\n\020bookticket_reply\022\013\n\003msg\030\001 \001(\005\"_\n\024"
  "cancelticket_request\022\n\n\002id\030\001 \001(\005\022\013\n\003cid\030"
  "\002 \001(\005\022\014\n\004site\030\003 \001(\005\022\022\n\nserial_num\030\004 \001(\005\022"
  "\014\n\004room\030\005 \001(\005\"&\n\022cancelticket_reply\022\020\n\010e"
  "rrno_id\030\001 \001(\005\"4\n\022personbook_request\022\n\n\002i"
  "d\030\001 \001(\005\022\022\n\nserial_num\030\002 \001(\005\"}\n\tPick_msg2"
  "\022\013\n\003cid\030\001 \001(\005\022\023\n\013st_ar_place\030\002 \001(\005\022\013\n\003da"
  "y\030\003 \001(\005\022\022\n\nst_ar_time\030\004 \001(\005\022\r\n\005price\030\005 \001"
  "(\005\022\014\n\004site\030\006 \001(\005\022\020\n\010iscancel\030\007 \001(\010\"A\n\020pe"
  "rsonbook_reply\022\020\n\010errno_id\030\001 \001(\010\022\033\n\007tick"
  "ets\030\002 \003(\0132\n.Pick_msg2\"3\n\021citymodel_reque"
  "st\022\n\n\002id\030\001 \001(\005\022\022\n\nserial_num\030\002 \001(\005\"\036\n\017ci"
  "tymodel_reply\022\013\n\003msg\030\001 \001(\tb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 1234, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);

// ===================================================================

class login_request::_Internal {
 public:
};

login_request::login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:login_request)
}
login_request::login_request(const login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pwd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pwd_));
  // @@protoc_insertion_point(copy_constructor:login_request)
}

inline void login_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pwd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(pwd_));
}

login_request::~login_request() {
  // @@protoc_insertion_point(destructor:login_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void login_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void login_request::ArenaDtor(void* object) {
  login_request* _this = reinterpret_cast< login_request* >(object);
  (void)_this;
}
void login_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_request::Clear() {
// @@protoc_insertion_point(message_clear_start:login_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pwd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(pwd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pwd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 pwd = 2;
  if (this->_internal_pwd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_request)
  return target;
}

size_t login_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 pwd = 2;
  if (this->_internal_pwd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    login_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_request::GetClassData() const { return &_class_data_; }

void login_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<login_request *>(to)->MergeFrom(
      static_cast<const login_request &>(from));
}


void login_request::MergeFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_pwd() != 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_request::CopyFrom(const login_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_request::IsInitialized() const {
  return true;
}

void login_request::InternalSwap(login_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(login_request, pwd_)
      + sizeof(login_request::pwd_)
      - PROTOBUF_FIELD_OFFSET(login_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata login_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class login_reply::_Internal {
 public:
};

login_reply::login_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:login_reply)
}
login_reply::login_reply(const login_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:login_reply)
}

inline void login_reply::SharedCtor() {
msg_ = 0;
}

login_reply::~login_reply() {
  // @@protoc_insertion_point(destructor:login_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void login_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void login_reply::ArenaDtor(void* object) {
  login_reply* _this = reinterpret_cast< login_reply* >(object);
  (void)_this;
}
void login_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void login_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void login_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:login_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* login_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* login_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:login_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login_reply)
  return target;
}

size_t login_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:login_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData login_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    login_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*login_reply::GetClassData() const { return &_class_data_; }

void login_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<login_reply *>(to)->MergeFrom(
      static_cast<const login_reply &>(from));
}


void login_reply::MergeFrom(const login_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void login_reply::CopyFrom(const login_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool login_reply::IsInitialized() const {
  return true;
}

void login_reply::InternalSwap(login_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata login_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class regists_request::_Internal {
 public:
};

regists_request::regists_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:regists_request)
}
regists_request::regists_request(const regists_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_num_, &from.phone_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&pwd_) -
    reinterpret_cast<char*>(&phone_num_)) + sizeof(pwd_));
  // @@protoc_insertion_point(copy_constructor:regists_request)
}

inline void regists_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pwd_) -
    reinterpret_cast<char*>(&phone_num_)) + sizeof(pwd_));
}

regists_request::~regists_request() {
  // @@protoc_insertion_point(destructor:regists_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void regists_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void regists_request::ArenaDtor(void* object) {
  regists_request* _this = reinterpret_cast< regists_request* >(object);
  (void)_this;
}
void regists_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void regists_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void regists_request::Clear() {
// @@protoc_insertion_point(message_clear_start:regists_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pwd_) -
      reinterpret_cast<char*>(&phone_num_)) + sizeof(pwd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* regists_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pwd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 phone_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          phone_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* regists_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regists_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pwd = 1;
  if (this->_internal_pwd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pwd(), target);
  }

  // int64 phone_num = 2;
  if (this->_internal_phone_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_phone_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regists_request)
  return target;
}

size_t regists_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regists_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone_num = 2;
  if (this->_internal_phone_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_phone_num());
  }

  // int32 pwd = 1;
  if (this->_internal_pwd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData regists_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    regists_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*regists_request::GetClassData() const { return &_class_data_; }

void regists_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<regists_request *>(to)->MergeFrom(
      static_cast<const regists_request &>(from));
}


void regists_request::MergeFrom(const regists_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:regists_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phone_num() != 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from._internal_pwd() != 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void regists_request::CopyFrom(const regists_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regists_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool regists_request::IsInitialized() const {
  return true;
}

void regists_request::InternalSwap(regists_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(regists_request, pwd_)
      + sizeof(regists_request::pwd_)
      - PROTOBUF_FIELD_OFFSET(regists_request, phone_num_)>(
          reinterpret_cast<char*>(&phone_num_),
          reinterpret_cast<char*>(&other->phone_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata regists_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class regists_reply::_Internal {
 public:
};

regists_reply::regists_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:regists_reply)
}
regists_reply::regists_reply(const regists_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:regists_reply)
}

inline void regists_reply::SharedCtor() {
msg_ = 0;
}

regists_reply::~regists_reply() {
  // @@protoc_insertion_point(destructor:regists_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void regists_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void regists_reply::ArenaDtor(void* object) {
  regists_reply* _this = reinterpret_cast< regists_reply* >(object);
  (void)_this;
}
void regists_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void regists_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void regists_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:regists_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* regists_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* regists_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:regists_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:regists_reply)
  return target;
}

size_t regists_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:regists_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData regists_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    regists_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*regists_reply::GetClassData() const { return &_class_data_; }

void regists_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<regists_reply *>(to)->MergeFrom(
      static_cast<const regists_reply &>(from));
}


void regists_reply::MergeFrom(const regists_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:regists_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void regists_reply::CopyFrom(const regists_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:regists_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool regists_reply::IsInitialized() const {
  return true;
}

void regists_reply::InternalSwap(regists_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata regists_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class loginout_request::_Internal {
 public:
};

loginout_request::loginout_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:loginout_request)
}
loginout_request::loginout_request(const loginout_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:loginout_request)
}

inline void loginout_request::SharedCtor() {
id_ = 0;
}

loginout_request::~loginout_request() {
  // @@protoc_insertion_point(destructor:loginout_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void loginout_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void loginout_request::ArenaDtor(void* object) {
  loginout_request* _this = reinterpret_cast< loginout_request* >(object);
  (void)_this;
}
void loginout_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void loginout_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void loginout_request::Clear() {
// @@protoc_insertion_point(message_clear_start:loginout_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* loginout_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* loginout_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:loginout_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:loginout_request)
  return target;
}

size_t loginout_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:loginout_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData loginout_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    loginout_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*loginout_request::GetClassData() const { return &_class_data_; }

void loginout_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<loginout_request *>(to)->MergeFrom(
      static_cast<const loginout_request &>(from));
}


void loginout_request::MergeFrom(const loginout_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:loginout_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void loginout_request::CopyFrom(const loginout_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:loginout_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool loginout_request::IsInitialized() const {
  return true;
}

void loginout_request::InternalSwap(loginout_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata loginout_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class recharge_request::_Internal {
 public:
};

recharge_request::recharge_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:recharge_request)
}
recharge_request::recharge_request(const recharge_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:recharge_request)
}

inline void recharge_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
}

recharge_request::~recharge_request() {
  // @@protoc_insertion_point(destructor:recharge_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void recharge_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void recharge_request::ArenaDtor(void* object) {
  recharge_request* _this = reinterpret_cast< recharge_request* >(object);
  (void)_this;
}
void recharge_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_request::Clear() {
// @@protoc_insertion_point(message_clear_start:recharge_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* recharge_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:recharge_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 money = 2;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_money(), target);
  }

  // int32 serial_num = 3;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recharge_request)
  return target;
}

size_t recharge_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recharge_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 money = 2;
  if (this->_internal_money() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // int32 serial_num = 3;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recharge_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    recharge_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recharge_request::GetClassData() const { return &_class_data_; }

void recharge_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<recharge_request *>(to)->MergeFrom(
      static_cast<const recharge_request &>(from));
}


void recharge_request::MergeFrom(const recharge_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recharge_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recharge_request::CopyFrom(const recharge_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recharge_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_request::IsInitialized() const {
  return true;
}

void recharge_request::InternalSwap(recharge_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(recharge_request, serial_num_)
      + sizeof(recharge_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(recharge_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class recharge_reply::_Internal {
 public:
};

recharge_reply::recharge_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:recharge_reply)
}
recharge_reply::recharge_reply(const recharge_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errno_id_ = from.errno_id_;
  // @@protoc_insertion_point(copy_constructor:recharge_reply)
}

inline void recharge_reply::SharedCtor() {
errno_id_ = false;
}

recharge_reply::~recharge_reply() {
  // @@protoc_insertion_point(destructor:recharge_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void recharge_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void recharge_reply::ArenaDtor(void* object) {
  recharge_reply* _this = reinterpret_cast< recharge_reply* >(object);
  (void)_this;
}
void recharge_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void recharge_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void recharge_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:recharge_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errno_id_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* recharge_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool errno_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errno_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* recharge_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:recharge_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_errno_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:recharge_reply)
  return target;
}

size_t recharge_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:recharge_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData recharge_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    recharge_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*recharge_reply::GetClassData() const { return &_class_data_; }

void recharge_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<recharge_reply *>(to)->MergeFrom(
      static_cast<const recharge_reply &>(from));
}


void recharge_reply::MergeFrom(const recharge_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:recharge_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errno_id() != 0) {
    _internal_set_errno_id(from._internal_errno_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void recharge_reply::CopyFrom(const recharge_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:recharge_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool recharge_reply::IsInitialized() const {
  return true;
}

void recharge_reply::InternalSwap(recharge_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(errno_id_, other->errno_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata recharge_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class findpwd_request::_Internal {
 public:
};

findpwd_request::findpwd_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:findpwd_request)
}
findpwd_request::findpwd_request(const findpwd_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&phone_num_, &from.phone_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&phone_num_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:findpwd_request)
}

inline void findpwd_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phone_num_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&phone_num_)) + sizeof(serial_num_));
}

findpwd_request::~findpwd_request() {
  // @@protoc_insertion_point(destructor:findpwd_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void findpwd_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void findpwd_request::ArenaDtor(void* object) {
  findpwd_request* _this = reinterpret_cast< findpwd_request* >(object);
  (void)_this;
}
void findpwd_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void findpwd_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void findpwd_request::Clear() {
// @@protoc_insertion_point(message_clear_start:findpwd_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phone_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&phone_num_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* findpwd_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 phone_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          phone_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* findpwd_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:findpwd_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 phone_num = 2;
  if (this->_internal_phone_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_phone_num(), target);
  }

  // int32 serial_num = 3;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:findpwd_request)
  return target;
}

size_t findpwd_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:findpwd_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 phone_num = 2;
  if (this->_internal_phone_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_phone_num());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 serial_num = 3;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData findpwd_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    findpwd_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*findpwd_request::GetClassData() const { return &_class_data_; }

void findpwd_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<findpwd_request *>(to)->MergeFrom(
      static_cast<const findpwd_request &>(from));
}


void findpwd_request::MergeFrom(const findpwd_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:findpwd_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_phone_num() != 0) {
    _internal_set_phone_num(from._internal_phone_num());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void findpwd_request::CopyFrom(const findpwd_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:findpwd_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool findpwd_request::IsInitialized() const {
  return true;
}

void findpwd_request::InternalSwap(findpwd_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(findpwd_request, serial_num_)
      + sizeof(findpwd_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(findpwd_request, phone_num_)>(
          reinterpret_cast<char*>(&phone_num_),
          reinterpret_cast<char*>(&other->phone_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata findpwd_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class findpwd_reply::_Internal {
 public:
};

findpwd_reply::findpwd_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:findpwd_reply)
}
findpwd_reply::findpwd_reply(const findpwd_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:findpwd_reply)
}

inline void findpwd_reply::SharedCtor() {
msg_ = 0;
}

findpwd_reply::~findpwd_reply() {
  // @@protoc_insertion_point(destructor:findpwd_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void findpwd_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void findpwd_reply::ArenaDtor(void* object) {
  findpwd_reply* _this = reinterpret_cast< findpwd_reply* >(object);
  (void)_this;
}
void findpwd_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void findpwd_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void findpwd_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:findpwd_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* findpwd_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* findpwd_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:findpwd_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:findpwd_reply)
  return target;
}

size_t findpwd_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:findpwd_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData findpwd_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    findpwd_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*findpwd_reply::GetClassData() const { return &_class_data_; }

void findpwd_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<findpwd_reply *>(to)->MergeFrom(
      static_cast<const findpwd_reply &>(from));
}


void findpwd_reply::MergeFrom(const findpwd_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:findpwd_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void findpwd_reply::CopyFrom(const findpwd_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:findpwd_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool findpwd_reply::IsInitialized() const {
  return true;
}

void findpwd_reply::InternalSwap(findpwd_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata findpwd_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class searchtickets_request::_Internal {
 public:
};

searchtickets_request::searchtickets_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:searchtickets_request)
}
searchtickets_request::searchtickets_request(const searchtickets_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&st_ar_place_, &from.st_ar_place_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&st_ar_place_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:searchtickets_request)
}

inline void searchtickets_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&st_ar_place_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&st_ar_place_)) + sizeof(serial_num_));
}

searchtickets_request::~searchtickets_request() {
  // @@protoc_insertion_point(destructor:searchtickets_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchtickets_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void searchtickets_request::ArenaDtor(void* object) {
  searchtickets_request* _this = reinterpret_cast< searchtickets_request* >(object);
  (void)_this;
}
void searchtickets_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchtickets_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchtickets_request::Clear() {
// @@protoc_insertion_point(message_clear_start:searchtickets_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&st_ar_place_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&st_ar_place_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchtickets_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 st_ar_place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          st_ar_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* searchtickets_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:searchtickets_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 st_ar_place = 1;
  if (this->_internal_st_ar_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_st_ar_place(), target);
  }

  // int32 day = 2;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_day(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:searchtickets_request)
  return target;
}

size_t searchtickets_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:searchtickets_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 st_ar_place = 1;
  if (this->_internal_st_ar_place() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_st_ar_place());
  }

  // int32 day = 2;
  if (this->_internal_day() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchtickets_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchtickets_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchtickets_request::GetClassData() const { return &_class_data_; }

void searchtickets_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchtickets_request *>(to)->MergeFrom(
      static_cast<const searchtickets_request &>(from));
}


void searchtickets_request::MergeFrom(const searchtickets_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:searchtickets_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_st_ar_place() != 0) {
    _internal_set_st_ar_place(from._internal_st_ar_place());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchtickets_request::CopyFrom(const searchtickets_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:searchtickets_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchtickets_request::IsInitialized() const {
  return true;
}

void searchtickets_request::InternalSwap(searchtickets_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(searchtickets_request, serial_num_)
      + sizeof(searchtickets_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(searchtickets_request, st_ar_place_)>(
          reinterpret_cast<char*>(&st_ar_place_),
          reinterpret_cast<char*>(&other->st_ar_place_));
}

::PROTOBUF_NAMESPACE_ID::Metadata searchtickets_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class Pick_msg::_Internal {
 public:
};

Pick_msg::Pick_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Pick_msg)
}
Pick_msg::Pick_msg(const Pick_msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tks_left_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(tks_left_));
  // @@protoc_insertion_point(copy_constructor:Pick_msg)
}

inline void Pick_msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tks_left_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(tks_left_));
}

Pick_msg::~Pick_msg() {
  // @@protoc_insertion_point(destructor:Pick_msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pick_msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pick_msg::ArenaDtor(void* object) {
  Pick_msg* _this = reinterpret_cast< Pick_msg* >(object);
  (void)_this;
}
void Pick_msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pick_msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pick_msg::Clear() {
// @@protoc_insertion_point(message_clear_start:Pick_msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tks_left_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(tks_left_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pick_msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 st_ar_place = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          st_ar_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 st_ar_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          st_ar_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tks_left = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          tks_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pick_msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pick_msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cid(), target);
  }

  // int32 st_ar_place = 2;
  if (this->_internal_st_ar_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_st_ar_place(), target);
  }

  // int32 st_ar_time = 3;
  if (this->_internal_st_ar_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_st_ar_time(), target);
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_price(), target);
  }

  // int32 tks_left = 5;
  if (this->_internal_tks_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tks_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pick_msg)
  return target;
}

size_t Pick_msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pick_msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cid());
  }

  // int32 st_ar_place = 2;
  if (this->_internal_st_ar_place() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_st_ar_place());
  }

  // int32 st_ar_time = 3;
  if (this->_internal_st_ar_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_st_ar_time());
  }

  // int32 price = 4;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 tks_left = 5;
  if (this->_internal_tks_left() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tks_left());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pick_msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pick_msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pick_msg::GetClassData() const { return &_class_data_; }

void Pick_msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pick_msg *>(to)->MergeFrom(
      static_cast<const Pick_msg &>(from));
}


void Pick_msg::MergeFrom(const Pick_msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pick_msg)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_st_ar_place() != 0) {
    _internal_set_st_ar_place(from._internal_st_ar_place());
  }
  if (from._internal_st_ar_time() != 0) {
    _internal_set_st_ar_time(from._internal_st_ar_time());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_tks_left() != 0) {
    _internal_set_tks_left(from._internal_tks_left());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pick_msg::CopyFrom(const Pick_msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pick_msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pick_msg::IsInitialized() const {
  return true;
}

void Pick_msg::InternalSwap(Pick_msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pick_msg, tks_left_)
      + sizeof(Pick_msg::tks_left_)
      - PROTOBUF_FIELD_OFFSET(Pick_msg, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pick_msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// ===================================================================

class searchtickets_reply::_Internal {
 public:
};

searchtickets_reply::searchtickets_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tickets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:searchtickets_reply)
}
searchtickets_reply::searchtickets_reply(const searchtickets_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tickets_(from.tickets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:searchtickets_reply)
}

inline void searchtickets_reply::SharedCtor() {
}

searchtickets_reply::~searchtickets_reply() {
  // @@protoc_insertion_point(destructor:searchtickets_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void searchtickets_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void searchtickets_reply::ArenaDtor(void* object) {
  searchtickets_reply* _this = reinterpret_cast< searchtickets_reply* >(object);
  (void)_this;
}
void searchtickets_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void searchtickets_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void searchtickets_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:searchtickets_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tickets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* searchtickets_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Pick_msg tickets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tickets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* searchtickets_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:searchtickets_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Pick_msg tickets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tickets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tickets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:searchtickets_reply)
  return target;
}

size_t searchtickets_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:searchtickets_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pick_msg tickets = 2;
  total_size += 1UL * this->_internal_tickets_size();
  for (const auto& msg : this->tickets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData searchtickets_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    searchtickets_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*searchtickets_reply::GetClassData() const { return &_class_data_; }

void searchtickets_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<searchtickets_reply *>(to)->MergeFrom(
      static_cast<const searchtickets_reply &>(from));
}


void searchtickets_reply::MergeFrom(const searchtickets_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:searchtickets_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tickets_.MergeFrom(from.tickets_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void searchtickets_reply::CopyFrom(const searchtickets_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:searchtickets_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool searchtickets_reply::IsInitialized() const {
  return true;
}

void searchtickets_reply::InternalSwap(searchtickets_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tickets_.InternalSwap(&other->tickets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata searchtickets_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[11]);
}

// ===================================================================

class bookticket_request::_Internal {
 public:
};

bookticket_request::bookticket_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bookticket_request)
}
bookticket_request::bookticket_request(const bookticket_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:bookticket_request)
}

inline void bookticket_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
}

bookticket_request::~bookticket_request() {
  // @@protoc_insertion_point(destructor:bookticket_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void bookticket_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void bookticket_request::ArenaDtor(void* object) {
  bookticket_request* _this = reinterpret_cast< bookticket_request* >(object);
  (void)_this;
}
void bookticket_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bookticket_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void bookticket_request::Clear() {
// @@protoc_insertion_point(message_clear_start:bookticket_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bookticket_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hope_col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          hope_col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* bookticket_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bookticket_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 cid = 2;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cid(), target);
  }

  // int32 hope_col = 3;
  if (this->_internal_hope_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hope_col(), target);
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bookticket_request)
  return target;
}

size_t bookticket_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bookticket_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 cid = 2;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cid());
  }

  // int32 hope_col = 3;
  if (this->_internal_hope_col() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hope_col());
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData bookticket_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    bookticket_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*bookticket_request::GetClassData() const { return &_class_data_; }

void bookticket_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<bookticket_request *>(to)->MergeFrom(
      static_cast<const bookticket_request &>(from));
}


void bookticket_request::MergeFrom(const bookticket_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bookticket_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_hope_col() != 0) {
    _internal_set_hope_col(from._internal_hope_col());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void bookticket_request::CopyFrom(const bookticket_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bookticket_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bookticket_request::IsInitialized() const {
  return true;
}

void bookticket_request::InternalSwap(bookticket_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(bookticket_request, serial_num_)
      + sizeof(bookticket_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(bookticket_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata bookticket_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[12]);
}

// ===================================================================

class bookticket_reply::_Internal {
 public:
};

bookticket_reply::bookticket_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:bookticket_reply)
}
bookticket_reply::bookticket_reply(const bookticket_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_ = from.msg_;
  // @@protoc_insertion_point(copy_constructor:bookticket_reply)
}

inline void bookticket_reply::SharedCtor() {
msg_ = 0;
}

bookticket_reply::~bookticket_reply() {
  // @@protoc_insertion_point(destructor:bookticket_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void bookticket_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void bookticket_reply::ArenaDtor(void* object) {
  bookticket_reply* _this = reinterpret_cast< bookticket_reply* >(object);
  (void)_this;
}
void bookticket_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bookticket_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void bookticket_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:bookticket_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bookticket_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* bookticket_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bookticket_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bookticket_reply)
  return target;
}

size_t bookticket_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bookticket_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 msg = 1;
  if (this->_internal_msg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData bookticket_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    bookticket_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*bookticket_reply::GetClassData() const { return &_class_data_; }

void bookticket_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<bookticket_reply *>(to)->MergeFrom(
      static_cast<const bookticket_reply &>(from));
}


void bookticket_reply::MergeFrom(const bookticket_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bookticket_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg() != 0) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void bookticket_reply::CopyFrom(const bookticket_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bookticket_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bookticket_reply::IsInitialized() const {
  return true;
}

void bookticket_reply::InternalSwap(bookticket_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bookticket_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[13]);
}

// ===================================================================

class cancelticket_request::_Internal {
 public:
};

cancelticket_request::cancelticket_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cancelticket_request)
}
cancelticket_request::cancelticket_request(const cancelticket_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_) -
    reinterpret_cast<char*>(&id_)) + sizeof(room_));
  // @@protoc_insertion_point(copy_constructor:cancelticket_request)
}

inline void cancelticket_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&room_) -
    reinterpret_cast<char*>(&id_)) + sizeof(room_));
}

cancelticket_request::~cancelticket_request() {
  // @@protoc_insertion_point(destructor:cancelticket_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void cancelticket_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void cancelticket_request::ArenaDtor(void* object) {
  cancelticket_request* _this = reinterpret_cast< cancelticket_request* >(object);
  (void)_this;
}
void cancelticket_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cancelticket_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cancelticket_request::Clear() {
// @@protoc_insertion_point(message_clear_start:cancelticket_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_) -
      reinterpret_cast<char*>(&id_)) + sizeof(room_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cancelticket_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 site = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 room = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          room_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* cancelticket_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cancelticket_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 cid = 2;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cid(), target);
  }

  // int32 site = 3;
  if (this->_internal_site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_site(), target);
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_serial_num(), target);
  }

  // int32 room = 5;
  if (this->_internal_room() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_room(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cancelticket_request)
  return target;
}

size_t cancelticket_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cancelticket_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 cid = 2;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cid());
  }

  // int32 site = 3;
  if (this->_internal_site() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_site());
  }

  // int32 serial_num = 4;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  // int32 room = 5;
  if (this->_internal_room() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_room());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cancelticket_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    cancelticket_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cancelticket_request::GetClassData() const { return &_class_data_; }

void cancelticket_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<cancelticket_request *>(to)->MergeFrom(
      static_cast<const cancelticket_request &>(from));
}


void cancelticket_request::MergeFrom(const cancelticket_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cancelticket_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_site() != 0) {
    _internal_set_site(from._internal_site());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  if (from._internal_room() != 0) {
    _internal_set_room(from._internal_room());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void cancelticket_request::CopyFrom(const cancelticket_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cancelticket_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelticket_request::IsInitialized() const {
  return true;
}

void cancelticket_request::InternalSwap(cancelticket_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cancelticket_request, room_)
      + sizeof(cancelticket_request::room_)
      - PROTOBUF_FIELD_OFFSET(cancelticket_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cancelticket_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[14]);
}

// ===================================================================

class cancelticket_reply::_Internal {
 public:
};

cancelticket_reply::cancelticket_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:cancelticket_reply)
}
cancelticket_reply::cancelticket_reply(const cancelticket_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errno_id_ = from.errno_id_;
  // @@protoc_insertion_point(copy_constructor:cancelticket_reply)
}

inline void cancelticket_reply::SharedCtor() {
errno_id_ = 0;
}

cancelticket_reply::~cancelticket_reply() {
  // @@protoc_insertion_point(destructor:cancelticket_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void cancelticket_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void cancelticket_reply::ArenaDtor(void* object) {
  cancelticket_reply* _this = reinterpret_cast< cancelticket_reply* >(object);
  (void)_this;
}
void cancelticket_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cancelticket_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void cancelticket_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:cancelticket_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errno_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cancelticket_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 errno_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errno_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* cancelticket_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cancelticket_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errno_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cancelticket_reply)
  return target;
}

size_t cancelticket_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cancelticket_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errno_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData cancelticket_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    cancelticket_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*cancelticket_reply::GetClassData() const { return &_class_data_; }

void cancelticket_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<cancelticket_reply *>(to)->MergeFrom(
      static_cast<const cancelticket_reply &>(from));
}


void cancelticket_reply::MergeFrom(const cancelticket_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cancelticket_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errno_id() != 0) {
    _internal_set_errno_id(from._internal_errno_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void cancelticket_reply::CopyFrom(const cancelticket_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cancelticket_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelticket_reply::IsInitialized() const {
  return true;
}

void cancelticket_reply::InternalSwap(cancelticket_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(errno_id_, other->errno_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cancelticket_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[15]);
}

// ===================================================================

class personbook_request::_Internal {
 public:
};

personbook_request::personbook_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:personbook_request)
}
personbook_request::personbook_request(const personbook_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:personbook_request)
}

inline void personbook_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
}

personbook_request::~personbook_request() {
  // @@protoc_insertion_point(destructor:personbook_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void personbook_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void personbook_request::ArenaDtor(void* object) {
  personbook_request* _this = reinterpret_cast< personbook_request* >(object);
  (void)_this;
}
void personbook_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void personbook_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void personbook_request::Clear() {
// @@protoc_insertion_point(message_clear_start:personbook_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* personbook_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* personbook_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:personbook_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 serial_num = 2;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:personbook_request)
  return target;
}

size_t personbook_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personbook_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 serial_num = 2;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData personbook_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    personbook_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*personbook_request::GetClassData() const { return &_class_data_; }

void personbook_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<personbook_request *>(to)->MergeFrom(
      static_cast<const personbook_request &>(from));
}


void personbook_request::MergeFrom(const personbook_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personbook_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void personbook_request::CopyFrom(const personbook_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personbook_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personbook_request::IsInitialized() const {
  return true;
}

void personbook_request::InternalSwap(personbook_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(personbook_request, serial_num_)
      + sizeof(personbook_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(personbook_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata personbook_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[16]);
}

// ===================================================================

class Pick_msg2::_Internal {
 public:
};

Pick_msg2::Pick_msg2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Pick_msg2)
}
Pick_msg2::Pick_msg2(const Pick_msg2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscancel_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(iscancel_));
  // @@protoc_insertion_point(copy_constructor:Pick_msg2)
}

inline void Pick_msg2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscancel_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(iscancel_));
}

Pick_msg2::~Pick_msg2() {
  // @@protoc_insertion_point(destructor:Pick_msg2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pick_msg2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pick_msg2::ArenaDtor(void* object) {
  Pick_msg2* _this = reinterpret_cast< Pick_msg2* >(object);
  (void)_this;
}
void Pick_msg2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pick_msg2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pick_msg2::Clear() {
// @@protoc_insertion_point(message_clear_start:Pick_msg2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iscancel_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(iscancel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pick_msg2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 st_ar_place = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          st_ar_place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 st_ar_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          st_ar_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 site = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool iscancel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          iscancel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pick_msg2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pick_msg2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cid(), target);
  }

  // int32 st_ar_place = 2;
  if (this->_internal_st_ar_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_st_ar_place(), target);
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 st_ar_time = 4;
  if (this->_internal_st_ar_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_st_ar_time(), target);
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_price(), target);
  }

  // int32 site = 6;
  if (this->_internal_site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_site(), target);
  }

  // bool iscancel = 7;
  if (this->_internal_iscancel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_iscancel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pick_msg2)
  return target;
}

size_t Pick_msg2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pick_msg2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cid());
  }

  // int32 st_ar_place = 2;
  if (this->_internal_st_ar_place() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_st_ar_place());
  }

  // int32 day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  // int32 st_ar_time = 4;
  if (this->_internal_st_ar_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_st_ar_time());
  }

  // int32 price = 5;
  if (this->_internal_price() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 site = 6;
  if (this->_internal_site() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_site());
  }

  // bool iscancel = 7;
  if (this->_internal_iscancel() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pick_msg2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pick_msg2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pick_msg2::GetClassData() const { return &_class_data_; }

void Pick_msg2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pick_msg2 *>(to)->MergeFrom(
      static_cast<const Pick_msg2 &>(from));
}


void Pick_msg2::MergeFrom(const Pick_msg2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pick_msg2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_st_ar_place() != 0) {
    _internal_set_st_ar_place(from._internal_st_ar_place());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_st_ar_time() != 0) {
    _internal_set_st_ar_time(from._internal_st_ar_time());
  }
  if (from._internal_price() != 0) {
    _internal_set_price(from._internal_price());
  }
  if (from._internal_site() != 0) {
    _internal_set_site(from._internal_site());
  }
  if (from._internal_iscancel() != 0) {
    _internal_set_iscancel(from._internal_iscancel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pick_msg2::CopyFrom(const Pick_msg2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pick_msg2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pick_msg2::IsInitialized() const {
  return true;
}

void Pick_msg2::InternalSwap(Pick_msg2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pick_msg2, iscancel_)
      + sizeof(Pick_msg2::iscancel_)
      - PROTOBUF_FIELD_OFFSET(Pick_msg2, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pick_msg2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[17]);
}

// ===================================================================

class personbook_reply::_Internal {
 public:
};

personbook_reply::personbook_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tickets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:personbook_reply)
}
personbook_reply::personbook_reply(const personbook_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tickets_(from.tickets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errno_id_ = from.errno_id_;
  // @@protoc_insertion_point(copy_constructor:personbook_reply)
}

inline void personbook_reply::SharedCtor() {
errno_id_ = false;
}

personbook_reply::~personbook_reply() {
  // @@protoc_insertion_point(destructor:personbook_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void personbook_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void personbook_reply::ArenaDtor(void* object) {
  personbook_reply* _this = reinterpret_cast< personbook_reply* >(object);
  (void)_this;
}
void personbook_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void personbook_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void personbook_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:personbook_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tickets_.Clear();
  errno_id_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* personbook_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool errno_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          errno_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Pick_msg2 tickets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tickets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* personbook_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:personbook_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_errno_id(), target);
  }

  // repeated .Pick_msg2 tickets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tickets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tickets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:personbook_reply)
  return target;
}

size_t personbook_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:personbook_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pick_msg2 tickets = 2;
  total_size += 1UL * this->_internal_tickets_size();
  for (const auto& msg : this->tickets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool errno_id = 1;
  if (this->_internal_errno_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData personbook_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    personbook_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*personbook_reply::GetClassData() const { return &_class_data_; }

void personbook_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<personbook_reply *>(to)->MergeFrom(
      static_cast<const personbook_reply &>(from));
}


void personbook_reply::MergeFrom(const personbook_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:personbook_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tickets_.MergeFrom(from.tickets_);
  if (from._internal_errno_id() != 0) {
    _internal_set_errno_id(from._internal_errno_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void personbook_reply::CopyFrom(const personbook_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:personbook_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool personbook_reply::IsInitialized() const {
  return true;
}

void personbook_reply::InternalSwap(personbook_reply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tickets_.InternalSwap(&other->tickets_);
  swap(errno_id_, other->errno_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata personbook_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[18]);
}

// ===================================================================

class citymodel_request::_Internal {
 public:
};

citymodel_request::citymodel_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:citymodel_request)
}
citymodel_request::citymodel_request(const citymodel_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  // @@protoc_insertion_point(copy_constructor:citymodel_request)
}

inline void citymodel_request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serial_num_) -
    reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
}

citymodel_request::~citymodel_request() {
  // @@protoc_insertion_point(destructor:citymodel_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void citymodel_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void citymodel_request::ArenaDtor(void* object) {
  citymodel_request* _this = reinterpret_cast< citymodel_request* >(object);
  (void)_this;
}
void citymodel_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void citymodel_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void citymodel_request::Clear() {
// @@protoc_insertion_point(message_clear_start:citymodel_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serial_num_) -
      reinterpret_cast<char*>(&id_)) + sizeof(serial_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* citymodel_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          serial_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* citymodel_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:citymodel_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 serial_num = 2;
  if (this->_internal_serial_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_serial_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citymodel_request)
  return target;
}

size_t citymodel_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:citymodel_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 serial_num = 2;
  if (this->_internal_serial_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_serial_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData citymodel_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    citymodel_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*citymodel_request::GetClassData() const { return &_class_data_; }

void citymodel_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<citymodel_request *>(to)->MergeFrom(
      static_cast<const citymodel_request &>(from));
}


void citymodel_request::MergeFrom(const citymodel_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:citymodel_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_serial_num() != 0) {
    _internal_set_serial_num(from._internal_serial_num());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void citymodel_request::CopyFrom(const citymodel_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:citymodel_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool citymodel_request::IsInitialized() const {
  return true;
}

void citymodel_request::InternalSwap(citymodel_request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(citymodel_request, serial_num_)
      + sizeof(citymodel_request::serial_num_)
      - PROTOBUF_FIELD_OFFSET(citymodel_request, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata citymodel_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[19]);
}

// ===================================================================

class citymodel_reply::_Internal {
 public:
};

citymodel_reply::citymodel_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:citymodel_reply)
}
citymodel_reply::citymodel_reply(const citymodel_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:citymodel_reply)
}

inline void citymodel_reply::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

citymodel_reply::~citymodel_reply() {
  // @@protoc_insertion_point(destructor:citymodel_reply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void citymodel_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void citymodel_reply::ArenaDtor(void* object) {
  citymodel_reply* _this = reinterpret_cast< citymodel_reply* >(object);
  (void)_this;
}
void citymodel_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void citymodel_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void citymodel_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:citymodel_reply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* citymodel_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "citymodel_reply.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* citymodel_reply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:citymodel_reply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "citymodel_reply.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:citymodel_reply)
  return target;
}

size_t citymodel_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:citymodel_reply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData citymodel_reply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    citymodel_reply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*citymodel_reply::GetClassData() const { return &_class_data_; }

void citymodel_reply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<citymodel_reply *>(to)->MergeFrom(
      static_cast<const citymodel_reply &>(from));
}


void citymodel_reply::MergeFrom(const citymodel_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:citymodel_reply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void citymodel_reply::CopyFrom(const citymodel_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:citymodel_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool citymodel_reply::IsInitialized() const {
  return true;
}

void citymodel_reply::InternalSwap(citymodel_reply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata citymodel_reply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::login_request* Arena::CreateMaybeMessage< ::login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::login_reply* Arena::CreateMaybeMessage< ::login_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::login_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::regists_request* Arena::CreateMaybeMessage< ::regists_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regists_request >(arena);
}
template<> PROTOBUF_NOINLINE ::regists_reply* Arena::CreateMaybeMessage< ::regists_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::regists_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::loginout_request* Arena::CreateMaybeMessage< ::loginout_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::loginout_request >(arena);
}
template<> PROTOBUF_NOINLINE ::recharge_request* Arena::CreateMaybeMessage< ::recharge_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::recharge_request >(arena);
}
template<> PROTOBUF_NOINLINE ::recharge_reply* Arena::CreateMaybeMessage< ::recharge_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::recharge_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::findpwd_request* Arena::CreateMaybeMessage< ::findpwd_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::findpwd_request >(arena);
}
template<> PROTOBUF_NOINLINE ::findpwd_reply* Arena::CreateMaybeMessage< ::findpwd_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::findpwd_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::searchtickets_request* Arena::CreateMaybeMessage< ::searchtickets_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::searchtickets_request >(arena);
}
template<> PROTOBUF_NOINLINE ::Pick_msg* Arena::CreateMaybeMessage< ::Pick_msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pick_msg >(arena);
}
template<> PROTOBUF_NOINLINE ::searchtickets_reply* Arena::CreateMaybeMessage< ::searchtickets_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::searchtickets_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::bookticket_request* Arena::CreateMaybeMessage< ::bookticket_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bookticket_request >(arena);
}
template<> PROTOBUF_NOINLINE ::bookticket_reply* Arena::CreateMaybeMessage< ::bookticket_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bookticket_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::cancelticket_request* Arena::CreateMaybeMessage< ::cancelticket_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cancelticket_request >(arena);
}
template<> PROTOBUF_NOINLINE ::cancelticket_reply* Arena::CreateMaybeMessage< ::cancelticket_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cancelticket_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::personbook_request* Arena::CreateMaybeMessage< ::personbook_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::personbook_request >(arena);
}
template<> PROTOBUF_NOINLINE ::Pick_msg2* Arena::CreateMaybeMessage< ::Pick_msg2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Pick_msg2 >(arena);
}
template<> PROTOBUF_NOINLINE ::personbook_reply* Arena::CreateMaybeMessage< ::personbook_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::personbook_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::citymodel_request* Arena::CreateMaybeMessage< ::citymodel_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::citymodel_request >(arena);
}
template<> PROTOBUF_NOINLINE ::citymodel_reply* Arena::CreateMaybeMessage< ::citymodel_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::citymodel_reply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

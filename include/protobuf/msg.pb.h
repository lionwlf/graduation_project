// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
class Pick_msg;
struct Pick_msgDefaultTypeInternal;
extern Pick_msgDefaultTypeInternal _Pick_msg_default_instance_;
class Pick_msg2;
struct Pick_msg2DefaultTypeInternal;
extern Pick_msg2DefaultTypeInternal _Pick_msg2_default_instance_;
class bookticket_reply;
struct bookticket_replyDefaultTypeInternal;
extern bookticket_replyDefaultTypeInternal _bookticket_reply_default_instance_;
class bookticket_request;
struct bookticket_requestDefaultTypeInternal;
extern bookticket_requestDefaultTypeInternal _bookticket_request_default_instance_;
class cancelticket_reply;
struct cancelticket_replyDefaultTypeInternal;
extern cancelticket_replyDefaultTypeInternal _cancelticket_reply_default_instance_;
class cancelticket_request;
struct cancelticket_requestDefaultTypeInternal;
extern cancelticket_requestDefaultTypeInternal _cancelticket_request_default_instance_;
class citymodel_reply;
struct citymodel_replyDefaultTypeInternal;
extern citymodel_replyDefaultTypeInternal _citymodel_reply_default_instance_;
class citymodel_request;
struct citymodel_requestDefaultTypeInternal;
extern citymodel_requestDefaultTypeInternal _citymodel_request_default_instance_;
class findpwd_reply;
struct findpwd_replyDefaultTypeInternal;
extern findpwd_replyDefaultTypeInternal _findpwd_reply_default_instance_;
class findpwd_request;
struct findpwd_requestDefaultTypeInternal;
extern findpwd_requestDefaultTypeInternal _findpwd_request_default_instance_;
class login_reply;
struct login_replyDefaultTypeInternal;
extern login_replyDefaultTypeInternal _login_reply_default_instance_;
class login_request;
struct login_requestDefaultTypeInternal;
extern login_requestDefaultTypeInternal _login_request_default_instance_;
class loginout_request;
struct loginout_requestDefaultTypeInternal;
extern loginout_requestDefaultTypeInternal _loginout_request_default_instance_;
class personbook_reply;
struct personbook_replyDefaultTypeInternal;
extern personbook_replyDefaultTypeInternal _personbook_reply_default_instance_;
class personbook_request;
struct personbook_requestDefaultTypeInternal;
extern personbook_requestDefaultTypeInternal _personbook_request_default_instance_;
class recharge_reply;
struct recharge_replyDefaultTypeInternal;
extern recharge_replyDefaultTypeInternal _recharge_reply_default_instance_;
class recharge_request;
struct recharge_requestDefaultTypeInternal;
extern recharge_requestDefaultTypeInternal _recharge_request_default_instance_;
class regists_reply;
struct regists_replyDefaultTypeInternal;
extern regists_replyDefaultTypeInternal _regists_reply_default_instance_;
class regists_request;
struct regists_requestDefaultTypeInternal;
extern regists_requestDefaultTypeInternal _regists_request_default_instance_;
class searchtickets_reply;
struct searchtickets_replyDefaultTypeInternal;
extern searchtickets_replyDefaultTypeInternal _searchtickets_reply_default_instance_;
class searchtickets_request;
struct searchtickets_requestDefaultTypeInternal;
extern searchtickets_requestDefaultTypeInternal _searchtickets_request_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Pick_msg* Arena::CreateMaybeMessage<::Pick_msg>(Arena*);
template<> ::Pick_msg2* Arena::CreateMaybeMessage<::Pick_msg2>(Arena*);
template<> ::bookticket_reply* Arena::CreateMaybeMessage<::bookticket_reply>(Arena*);
template<> ::bookticket_request* Arena::CreateMaybeMessage<::bookticket_request>(Arena*);
template<> ::cancelticket_reply* Arena::CreateMaybeMessage<::cancelticket_reply>(Arena*);
template<> ::cancelticket_request* Arena::CreateMaybeMessage<::cancelticket_request>(Arena*);
template<> ::citymodel_reply* Arena::CreateMaybeMessage<::citymodel_reply>(Arena*);
template<> ::citymodel_request* Arena::CreateMaybeMessage<::citymodel_request>(Arena*);
template<> ::findpwd_reply* Arena::CreateMaybeMessage<::findpwd_reply>(Arena*);
template<> ::findpwd_request* Arena::CreateMaybeMessage<::findpwd_request>(Arena*);
template<> ::login_reply* Arena::CreateMaybeMessage<::login_reply>(Arena*);
template<> ::login_request* Arena::CreateMaybeMessage<::login_request>(Arena*);
template<> ::loginout_request* Arena::CreateMaybeMessage<::loginout_request>(Arena*);
template<> ::personbook_reply* Arena::CreateMaybeMessage<::personbook_reply>(Arena*);
template<> ::personbook_request* Arena::CreateMaybeMessage<::personbook_request>(Arena*);
template<> ::recharge_reply* Arena::CreateMaybeMessage<::recharge_reply>(Arena*);
template<> ::recharge_request* Arena::CreateMaybeMessage<::recharge_request>(Arena*);
template<> ::regists_reply* Arena::CreateMaybeMessage<::regists_reply>(Arena*);
template<> ::regists_request* Arena::CreateMaybeMessage<::regists_request>(Arena*);
template<> ::searchtickets_reply* Arena::CreateMaybeMessage<::searchtickets_reply>(Arena*);
template<> ::searchtickets_request* Arena::CreateMaybeMessage<::searchtickets_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class login_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_request) */ {
 public:
  inline login_request() : login_request(nullptr) {}
  ~login_request() override;
  explicit constexpr login_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_request(const login_request& from);
  login_request(login_request&& from) noexcept
    : login_request() {
    *this = ::std::move(from);
  }

  inline login_request& operator=(const login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_request& operator=(login_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_request* internal_default_instance() {
    return reinterpret_cast<const login_request*>(
               &_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(login_request& a, login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(login_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const login_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_request";
  }
  protected:
  explicit login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 pwd = 2;
  void clear_pwd();
  int32_t pwd() const;
  void set_pwd(int32_t value);
  private:
  int32_t _internal_pwd() const;
  void _internal_set_pwd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class login_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:login_reply) */ {
 public:
  inline login_reply() : login_reply(nullptr) {}
  ~login_reply() override;
  explicit constexpr login_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  login_reply(const login_reply& from);
  login_reply(login_reply&& from) noexcept
    : login_reply() {
    *this = ::std::move(from);
  }

  inline login_reply& operator=(const login_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline login_reply& operator=(login_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const login_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const login_reply* internal_default_instance() {
    return reinterpret_cast<const login_reply*>(
               &_login_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(login_reply& a, login_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(login_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(login_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  login_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<login_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const login_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const login_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(login_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "login_reply";
  }
  protected:
  explicit login_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // int32 msg = 1;
  void clear_msg();
  int32_t msg() const;
  void set_msg(int32_t value);
  private:
  int32_t _internal_msg() const;
  void _internal_set_msg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:login_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class regists_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:regists_request) */ {
 public:
  inline regists_request() : regists_request(nullptr) {}
  ~regists_request() override;
  explicit constexpr regists_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  regists_request(const regists_request& from);
  regists_request(regists_request&& from) noexcept
    : regists_request() {
    *this = ::std::move(from);
  }

  inline regists_request& operator=(const regists_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline regists_request& operator=(regists_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const regists_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const regists_request* internal_default_instance() {
    return reinterpret_cast<const regists_request*>(
               &_regists_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(regists_request& a, regists_request& b) {
    a.Swap(&b);
  }
  inline void Swap(regists_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(regists_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  regists_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<regists_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const regists_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const regists_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(regists_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "regists_request";
  }
  protected:
  explicit regists_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumFieldNumber = 2,
    kPwdFieldNumber = 1,
  };
  // int64 phone_num = 2;
  void clear_phone_num();
  int64_t phone_num() const;
  void set_phone_num(int64_t value);
  private:
  int64_t _internal_phone_num() const;
  void _internal_set_phone_num(int64_t value);
  public:

  // int32 pwd = 1;
  void clear_pwd();
  int32_t pwd() const;
  void set_pwd(int32_t value);
  private:
  int32_t _internal_pwd() const;
  void _internal_set_pwd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:regists_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t phone_num_;
  int32_t pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class regists_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:regists_reply) */ {
 public:
  inline regists_reply() : regists_reply(nullptr) {}
  ~regists_reply() override;
  explicit constexpr regists_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  regists_reply(const regists_reply& from);
  regists_reply(regists_reply&& from) noexcept
    : regists_reply() {
    *this = ::std::move(from);
  }

  inline regists_reply& operator=(const regists_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline regists_reply& operator=(regists_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const regists_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const regists_reply* internal_default_instance() {
    return reinterpret_cast<const regists_reply*>(
               &_regists_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(regists_reply& a, regists_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(regists_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(regists_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  regists_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<regists_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const regists_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const regists_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(regists_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "regists_reply";
  }
  protected:
  explicit regists_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // int32 msg = 1;
  void clear_msg();
  int32_t msg() const;
  void set_msg(int32_t value);
  private:
  int32_t _internal_msg() const;
  void _internal_set_msg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:regists_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class loginout_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:loginout_request) */ {
 public:
  inline loginout_request() : loginout_request(nullptr) {}
  ~loginout_request() override;
  explicit constexpr loginout_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  loginout_request(const loginout_request& from);
  loginout_request(loginout_request&& from) noexcept
    : loginout_request() {
    *this = ::std::move(from);
  }

  inline loginout_request& operator=(const loginout_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline loginout_request& operator=(loginout_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const loginout_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const loginout_request* internal_default_instance() {
    return reinterpret_cast<const loginout_request*>(
               &_loginout_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(loginout_request& a, loginout_request& b) {
    a.Swap(&b);
  }
  inline void Swap(loginout_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(loginout_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  loginout_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<loginout_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const loginout_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const loginout_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginout_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "loginout_request";
  }
  protected:
  explicit loginout_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:loginout_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class recharge_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recharge_request) */ {
 public:
  inline recharge_request() : recharge_request(nullptr) {}
  ~recharge_request() override;
  explicit constexpr recharge_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_request(const recharge_request& from);
  recharge_request(recharge_request&& from) noexcept
    : recharge_request() {
    *this = ::std::move(from);
  }

  inline recharge_request& operator=(const recharge_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_request& operator=(recharge_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const recharge_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_request* internal_default_instance() {
    return reinterpret_cast<const recharge_request*>(
               &_recharge_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(recharge_request& a, recharge_request& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  recharge_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<recharge_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const recharge_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const recharge_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recharge_request";
  }
  protected:
  explicit recharge_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kSerialNumFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 money = 2;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 serial_num = 3;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:recharge_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t money_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class recharge_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:recharge_reply) */ {
 public:
  inline recharge_reply() : recharge_reply(nullptr) {}
  ~recharge_reply() override;
  explicit constexpr recharge_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  recharge_reply(const recharge_reply& from);
  recharge_reply(recharge_reply&& from) noexcept
    : recharge_reply() {
    *this = ::std::move(from);
  }

  inline recharge_reply& operator=(const recharge_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline recharge_reply& operator=(recharge_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const recharge_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const recharge_reply* internal_default_instance() {
    return reinterpret_cast<const recharge_reply*>(
               &_recharge_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(recharge_reply& a, recharge_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(recharge_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(recharge_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  recharge_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<recharge_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const recharge_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const recharge_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(recharge_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recharge_reply";
  }
  protected:
  explicit recharge_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrnoIdFieldNumber = 1,
  };
  // bool errno_id = 1;
  void clear_errno_id();
  bool errno_id() const;
  void set_errno_id(bool value);
  private:
  bool _internal_errno_id() const;
  void _internal_set_errno_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:recharge_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool errno_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class findpwd_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:findpwd_request) */ {
 public:
  inline findpwd_request() : findpwd_request(nullptr) {}
  ~findpwd_request() override;
  explicit constexpr findpwd_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findpwd_request(const findpwd_request& from);
  findpwd_request(findpwd_request&& from) noexcept
    : findpwd_request() {
    *this = ::std::move(from);
  }

  inline findpwd_request& operator=(const findpwd_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline findpwd_request& operator=(findpwd_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findpwd_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const findpwd_request* internal_default_instance() {
    return reinterpret_cast<const findpwd_request*>(
               &_findpwd_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(findpwd_request& a, findpwd_request& b) {
    a.Swap(&b);
  }
  inline void Swap(findpwd_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findpwd_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  findpwd_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<findpwd_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findpwd_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findpwd_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findpwd_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "findpwd_request";
  }
  protected:
  explicit findpwd_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumFieldNumber = 2,
    kIdFieldNumber = 1,
    kSerialNumFieldNumber = 3,
  };
  // int64 phone_num = 2;
  void clear_phone_num();
  int64_t phone_num() const;
  void set_phone_num(int64_t value);
  private:
  int64_t _internal_phone_num() const;
  void _internal_set_phone_num(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 serial_num = 3;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:findpwd_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t phone_num_;
  int32_t id_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class findpwd_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:findpwd_reply) */ {
 public:
  inline findpwd_reply() : findpwd_reply(nullptr) {}
  ~findpwd_reply() override;
  explicit constexpr findpwd_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  findpwd_reply(const findpwd_reply& from);
  findpwd_reply(findpwd_reply&& from) noexcept
    : findpwd_reply() {
    *this = ::std::move(from);
  }

  inline findpwd_reply& operator=(const findpwd_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline findpwd_reply& operator=(findpwd_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const findpwd_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const findpwd_reply* internal_default_instance() {
    return reinterpret_cast<const findpwd_reply*>(
               &_findpwd_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(findpwd_reply& a, findpwd_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(findpwd_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(findpwd_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  findpwd_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<findpwd_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const findpwd_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const findpwd_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(findpwd_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "findpwd_reply";
  }
  protected:
  explicit findpwd_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // int32 msg = 1;
  void clear_msg();
  int32_t msg() const;
  void set_msg(int32_t value);
  private:
  int32_t _internal_msg() const;
  void _internal_set_msg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:findpwd_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class searchtickets_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:searchtickets_request) */ {
 public:
  inline searchtickets_request() : searchtickets_request(nullptr) {}
  ~searchtickets_request() override;
  explicit constexpr searchtickets_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  searchtickets_request(const searchtickets_request& from);
  searchtickets_request(searchtickets_request&& from) noexcept
    : searchtickets_request() {
    *this = ::std::move(from);
  }

  inline searchtickets_request& operator=(const searchtickets_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchtickets_request& operator=(searchtickets_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const searchtickets_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const searchtickets_request* internal_default_instance() {
    return reinterpret_cast<const searchtickets_request*>(
               &_searchtickets_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(searchtickets_request& a, searchtickets_request& b) {
    a.Swap(&b);
  }
  inline void Swap(searchtickets_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchtickets_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  searchtickets_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<searchtickets_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const searchtickets_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const searchtickets_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchtickets_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "searchtickets_request";
  }
  protected:
  explicit searchtickets_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStArPlaceFieldNumber = 1,
    kDayFieldNumber = 2,
    kIdFieldNumber = 3,
    kSerialNumFieldNumber = 4,
  };
  // int32 st_ar_place = 1;
  void clear_st_ar_place();
  int32_t st_ar_place() const;
  void set_st_ar_place(int32_t value);
  private:
  int32_t _internal_st_ar_place() const;
  void _internal_set_st_ar_place(int32_t value);
  public:

  // int32 day = 2;
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // int32 id = 3;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 serial_num = 4;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:searchtickets_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t st_ar_place_;
  int32_t day_;
  int32_t id_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Pick_msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pick_msg) */ {
 public:
  inline Pick_msg() : Pick_msg(nullptr) {}
  ~Pick_msg() override;
  explicit constexpr Pick_msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pick_msg(const Pick_msg& from);
  Pick_msg(Pick_msg&& from) noexcept
    : Pick_msg() {
    *this = ::std::move(from);
  }

  inline Pick_msg& operator=(const Pick_msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pick_msg& operator=(Pick_msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pick_msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pick_msg* internal_default_instance() {
    return reinterpret_cast<const Pick_msg*>(
               &_Pick_msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Pick_msg& a, Pick_msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Pick_msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pick_msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pick_msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pick_msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pick_msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pick_msg& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pick_msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pick_msg";
  }
  protected:
  explicit Pick_msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
    kStArPlaceFieldNumber = 2,
    kStArTimeFieldNumber = 3,
    kPriceFieldNumber = 4,
    kTksLeftFieldNumber = 5,
  };
  // int32 cid = 1;
  void clear_cid();
  int32_t cid() const;
  void set_cid(int32_t value);
  private:
  int32_t _internal_cid() const;
  void _internal_set_cid(int32_t value);
  public:

  // int32 st_ar_place = 2;
  void clear_st_ar_place();
  int32_t st_ar_place() const;
  void set_st_ar_place(int32_t value);
  private:
  int32_t _internal_st_ar_place() const;
  void _internal_set_st_ar_place(int32_t value);
  public:

  // int32 st_ar_time = 3;
  void clear_st_ar_time();
  int32_t st_ar_time() const;
  void set_st_ar_time(int32_t value);
  private:
  int32_t _internal_st_ar_time() const;
  void _internal_set_st_ar_time(int32_t value);
  public:

  // int32 price = 4;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 tks_left = 5;
  void clear_tks_left();
  int32_t tks_left() const;
  void set_tks_left(int32_t value);
  private:
  int32_t _internal_tks_left() const;
  void _internal_set_tks_left(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Pick_msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t cid_;
  int32_t st_ar_place_;
  int32_t st_ar_time_;
  int32_t price_;
  int32_t tks_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class searchtickets_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:searchtickets_reply) */ {
 public:
  inline searchtickets_reply() : searchtickets_reply(nullptr) {}
  ~searchtickets_reply() override;
  explicit constexpr searchtickets_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  searchtickets_reply(const searchtickets_reply& from);
  searchtickets_reply(searchtickets_reply&& from) noexcept
    : searchtickets_reply() {
    *this = ::std::move(from);
  }

  inline searchtickets_reply& operator=(const searchtickets_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline searchtickets_reply& operator=(searchtickets_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const searchtickets_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const searchtickets_reply* internal_default_instance() {
    return reinterpret_cast<const searchtickets_reply*>(
               &_searchtickets_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(searchtickets_reply& a, searchtickets_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(searchtickets_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(searchtickets_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  searchtickets_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<searchtickets_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const searchtickets_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const searchtickets_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(searchtickets_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "searchtickets_reply";
  }
  protected:
  explicit searchtickets_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketsFieldNumber = 2,
  };
  // repeated .Pick_msg tickets = 2;
  int tickets_size() const;
  private:
  int _internal_tickets_size() const;
  public:
  void clear_tickets();
  ::Pick_msg* mutable_tickets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg >*
      mutable_tickets();
  private:
  const ::Pick_msg& _internal_tickets(int index) const;
  ::Pick_msg* _internal_add_tickets();
  public:
  const ::Pick_msg& tickets(int index) const;
  ::Pick_msg* add_tickets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg >&
      tickets() const;

  // @@protoc_insertion_point(class_scope:searchtickets_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg > tickets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class bookticket_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bookticket_request) */ {
 public:
  inline bookticket_request() : bookticket_request(nullptr) {}
  ~bookticket_request() override;
  explicit constexpr bookticket_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bookticket_request(const bookticket_request& from);
  bookticket_request(bookticket_request&& from) noexcept
    : bookticket_request() {
    *this = ::std::move(from);
  }

  inline bookticket_request& operator=(const bookticket_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline bookticket_request& operator=(bookticket_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bookticket_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const bookticket_request* internal_default_instance() {
    return reinterpret_cast<const bookticket_request*>(
               &_bookticket_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(bookticket_request& a, bookticket_request& b) {
    a.Swap(&b);
  }
  inline void Swap(bookticket_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bookticket_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  bookticket_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<bookticket_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bookticket_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const bookticket_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bookticket_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bookticket_request";
  }
  protected:
  explicit bookticket_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCidFieldNumber = 2,
    kHopeColFieldNumber = 3,
    kSerialNumFieldNumber = 4,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 cid = 2;
  void clear_cid();
  int32_t cid() const;
  void set_cid(int32_t value);
  private:
  int32_t _internal_cid() const;
  void _internal_set_cid(int32_t value);
  public:

  // int32 hope_col = 3;
  void clear_hope_col();
  int32_t hope_col() const;
  void set_hope_col(int32_t value);
  private:
  int32_t _internal_hope_col() const;
  void _internal_set_hope_col(int32_t value);
  public:

  // int32 serial_num = 4;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bookticket_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t cid_;
  int32_t hope_col_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class bookticket_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bookticket_reply) */ {
 public:
  inline bookticket_reply() : bookticket_reply(nullptr) {}
  ~bookticket_reply() override;
  explicit constexpr bookticket_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  bookticket_reply(const bookticket_reply& from);
  bookticket_reply(bookticket_reply&& from) noexcept
    : bookticket_reply() {
    *this = ::std::move(from);
  }

  inline bookticket_reply& operator=(const bookticket_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline bookticket_reply& operator=(bookticket_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const bookticket_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const bookticket_reply* internal_default_instance() {
    return reinterpret_cast<const bookticket_reply*>(
               &_bookticket_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(bookticket_reply& a, bookticket_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(bookticket_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bookticket_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  bookticket_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<bookticket_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const bookticket_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const bookticket_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bookticket_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bookticket_reply";
  }
  protected:
  explicit bookticket_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // int32 msg = 1;
  void clear_msg();
  int32_t msg() const;
  void set_msg(int32_t value);
  private:
  int32_t _internal_msg() const;
  void _internal_set_msg(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:bookticket_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class cancelticket_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cancelticket_request) */ {
 public:
  inline cancelticket_request() : cancelticket_request(nullptr) {}
  ~cancelticket_request() override;
  explicit constexpr cancelticket_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cancelticket_request(const cancelticket_request& from);
  cancelticket_request(cancelticket_request&& from) noexcept
    : cancelticket_request() {
    *this = ::std::move(from);
  }

  inline cancelticket_request& operator=(const cancelticket_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline cancelticket_request& operator=(cancelticket_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cancelticket_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const cancelticket_request* internal_default_instance() {
    return reinterpret_cast<const cancelticket_request*>(
               &_cancelticket_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(cancelticket_request& a, cancelticket_request& b) {
    a.Swap(&b);
  }
  inline void Swap(cancelticket_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cancelticket_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cancelticket_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cancelticket_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cancelticket_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const cancelticket_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cancelticket_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cancelticket_request";
  }
  protected:
  explicit cancelticket_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCidFieldNumber = 2,
    kSiteFieldNumber = 3,
    kSerialNumFieldNumber = 4,
    kRoomFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 cid = 2;
  void clear_cid();
  int32_t cid() const;
  void set_cid(int32_t value);
  private:
  int32_t _internal_cid() const;
  void _internal_set_cid(int32_t value);
  public:

  // int32 site = 3;
  void clear_site();
  int32_t site() const;
  void set_site(int32_t value);
  private:
  int32_t _internal_site() const;
  void _internal_set_site(int32_t value);
  public:

  // int32 serial_num = 4;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // int32 room = 5;
  void clear_room();
  int32_t room() const;
  void set_room(int32_t value);
  private:
  int32_t _internal_room() const;
  void _internal_set_room(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cancelticket_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t cid_;
  int32_t site_;
  int32_t serial_num_;
  int32_t room_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class cancelticket_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cancelticket_reply) */ {
 public:
  inline cancelticket_reply() : cancelticket_reply(nullptr) {}
  ~cancelticket_reply() override;
  explicit constexpr cancelticket_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cancelticket_reply(const cancelticket_reply& from);
  cancelticket_reply(cancelticket_reply&& from) noexcept
    : cancelticket_reply() {
    *this = ::std::move(from);
  }

  inline cancelticket_reply& operator=(const cancelticket_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline cancelticket_reply& operator=(cancelticket_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cancelticket_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const cancelticket_reply* internal_default_instance() {
    return reinterpret_cast<const cancelticket_reply*>(
               &_cancelticket_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(cancelticket_reply& a, cancelticket_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(cancelticket_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cancelticket_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cancelticket_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cancelticket_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cancelticket_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const cancelticket_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cancelticket_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cancelticket_reply";
  }
  protected:
  explicit cancelticket_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrnoIdFieldNumber = 1,
  };
  // int32 errno_id = 1;
  void clear_errno_id();
  int32_t errno_id() const;
  void set_errno_id(int32_t value);
  private:
  int32_t _internal_errno_id() const;
  void _internal_set_errno_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cancelticket_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t errno_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class personbook_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personbook_request) */ {
 public:
  inline personbook_request() : personbook_request(nullptr) {}
  ~personbook_request() override;
  explicit constexpr personbook_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  personbook_request(const personbook_request& from);
  personbook_request(personbook_request&& from) noexcept
    : personbook_request() {
    *this = ::std::move(from);
  }

  inline personbook_request& operator=(const personbook_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline personbook_request& operator=(personbook_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const personbook_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const personbook_request* internal_default_instance() {
    return reinterpret_cast<const personbook_request*>(
               &_personbook_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(personbook_request& a, personbook_request& b) {
    a.Swap(&b);
  }
  inline void Swap(personbook_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(personbook_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  personbook_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<personbook_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const personbook_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const personbook_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(personbook_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personbook_request";
  }
  protected:
  explicit personbook_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSerialNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 serial_num = 2;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:personbook_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class Pick_msg2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Pick_msg2) */ {
 public:
  inline Pick_msg2() : Pick_msg2(nullptr) {}
  ~Pick_msg2() override;
  explicit constexpr Pick_msg2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pick_msg2(const Pick_msg2& from);
  Pick_msg2(Pick_msg2&& from) noexcept
    : Pick_msg2() {
    *this = ::std::move(from);
  }

  inline Pick_msg2& operator=(const Pick_msg2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pick_msg2& operator=(Pick_msg2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pick_msg2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pick_msg2* internal_default_instance() {
    return reinterpret_cast<const Pick_msg2*>(
               &_Pick_msg2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Pick_msg2& a, Pick_msg2& b) {
    a.Swap(&b);
  }
  inline void Swap(Pick_msg2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pick_msg2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pick_msg2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pick_msg2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pick_msg2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pick_msg2& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pick_msg2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Pick_msg2";
  }
  protected:
  explicit Pick_msg2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCidFieldNumber = 1,
    kStArPlaceFieldNumber = 2,
    kDayFieldNumber = 3,
    kStArTimeFieldNumber = 4,
    kPriceFieldNumber = 5,
    kSiteFieldNumber = 6,
    kIscancelFieldNumber = 7,
  };
  // int32 cid = 1;
  void clear_cid();
  int32_t cid() const;
  void set_cid(int32_t value);
  private:
  int32_t _internal_cid() const;
  void _internal_set_cid(int32_t value);
  public:

  // int32 st_ar_place = 2;
  void clear_st_ar_place();
  int32_t st_ar_place() const;
  void set_st_ar_place(int32_t value);
  private:
  int32_t _internal_st_ar_place() const;
  void _internal_set_st_ar_place(int32_t value);
  public:

  // int32 day = 3;
  void clear_day();
  int32_t day() const;
  void set_day(int32_t value);
  private:
  int32_t _internal_day() const;
  void _internal_set_day(int32_t value);
  public:

  // int32 st_ar_time = 4;
  void clear_st_ar_time();
  int32_t st_ar_time() const;
  void set_st_ar_time(int32_t value);
  private:
  int32_t _internal_st_ar_time() const;
  void _internal_set_st_ar_time(int32_t value);
  public:

  // int32 price = 5;
  void clear_price();
  int32_t price() const;
  void set_price(int32_t value);
  private:
  int32_t _internal_price() const;
  void _internal_set_price(int32_t value);
  public:

  // int32 site = 6;
  void clear_site();
  int32_t site() const;
  void set_site(int32_t value);
  private:
  int32_t _internal_site() const;
  void _internal_set_site(int32_t value);
  public:

  // bool iscancel = 7;
  void clear_iscancel();
  bool iscancel() const;
  void set_iscancel(bool value);
  private:
  bool _internal_iscancel() const;
  void _internal_set_iscancel(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Pick_msg2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t cid_;
  int32_t st_ar_place_;
  int32_t day_;
  int32_t st_ar_time_;
  int32_t price_;
  int32_t site_;
  bool iscancel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class personbook_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:personbook_reply) */ {
 public:
  inline personbook_reply() : personbook_reply(nullptr) {}
  ~personbook_reply() override;
  explicit constexpr personbook_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  personbook_reply(const personbook_reply& from);
  personbook_reply(personbook_reply&& from) noexcept
    : personbook_reply() {
    *this = ::std::move(from);
  }

  inline personbook_reply& operator=(const personbook_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline personbook_reply& operator=(personbook_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const personbook_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const personbook_reply* internal_default_instance() {
    return reinterpret_cast<const personbook_reply*>(
               &_personbook_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(personbook_reply& a, personbook_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(personbook_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(personbook_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  personbook_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<personbook_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const personbook_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const personbook_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(personbook_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "personbook_reply";
  }
  protected:
  explicit personbook_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketsFieldNumber = 2,
    kErrnoIdFieldNumber = 1,
  };
  // repeated .Pick_msg2 tickets = 2;
  int tickets_size() const;
  private:
  int _internal_tickets_size() const;
  public:
  void clear_tickets();
  ::Pick_msg2* mutable_tickets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg2 >*
      mutable_tickets();
  private:
  const ::Pick_msg2& _internal_tickets(int index) const;
  ::Pick_msg2* _internal_add_tickets();
  public:
  const ::Pick_msg2& tickets(int index) const;
  ::Pick_msg2* add_tickets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg2 >&
      tickets() const;

  // bool errno_id = 1;
  void clear_errno_id();
  bool errno_id() const;
  void set_errno_id(bool value);
  private:
  bool _internal_errno_id() const;
  void _internal_set_errno_id(bool value);
  public:

  // @@protoc_insertion_point(class_scope:personbook_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg2 > tickets_;
  bool errno_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class citymodel_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:citymodel_request) */ {
 public:
  inline citymodel_request() : citymodel_request(nullptr) {}
  ~citymodel_request() override;
  explicit constexpr citymodel_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  citymodel_request(const citymodel_request& from);
  citymodel_request(citymodel_request&& from) noexcept
    : citymodel_request() {
    *this = ::std::move(from);
  }

  inline citymodel_request& operator=(const citymodel_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline citymodel_request& operator=(citymodel_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const citymodel_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const citymodel_request* internal_default_instance() {
    return reinterpret_cast<const citymodel_request*>(
               &_citymodel_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(citymodel_request& a, citymodel_request& b) {
    a.Swap(&b);
  }
  inline void Swap(citymodel_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(citymodel_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  citymodel_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<citymodel_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const citymodel_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const citymodel_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(citymodel_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "citymodel_request";
  }
  protected:
  explicit citymodel_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSerialNumFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 serial_num = 2;
  void clear_serial_num();
  int32_t serial_num() const;
  void set_serial_num(int32_t value);
  private:
  int32_t _internal_serial_num() const;
  void _internal_set_serial_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:citymodel_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t id_;
  int32_t serial_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class citymodel_reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:citymodel_reply) */ {
 public:
  inline citymodel_reply() : citymodel_reply(nullptr) {}
  ~citymodel_reply() override;
  explicit constexpr citymodel_reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  citymodel_reply(const citymodel_reply& from);
  citymodel_reply(citymodel_reply&& from) noexcept
    : citymodel_reply() {
    *this = ::std::move(from);
  }

  inline citymodel_reply& operator=(const citymodel_reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline citymodel_reply& operator=(citymodel_reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const citymodel_reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const citymodel_reply* internal_default_instance() {
    return reinterpret_cast<const citymodel_reply*>(
               &_citymodel_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(citymodel_reply& a, citymodel_reply& b) {
    a.Swap(&b);
  }
  inline void Swap(citymodel_reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(citymodel_reply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  citymodel_reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<citymodel_reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const citymodel_reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const citymodel_reply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(citymodel_reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "citymodel_reply";
  }
  protected:
  explicit citymodel_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:citymodel_reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// login_request

// int32 id = 1;
inline void login_request::clear_id() {
  id_ = 0;
}
inline int32_t login_request::_internal_id() const {
  return id_;
}
inline int32_t login_request::id() const {
  // @@protoc_insertion_point(field_get:login_request.id)
  return _internal_id();
}
inline void login_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void login_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:login_request.id)
}

// int32 pwd = 2;
inline void login_request::clear_pwd() {
  pwd_ = 0;
}
inline int32_t login_request::_internal_pwd() const {
  return pwd_;
}
inline int32_t login_request::pwd() const {
  // @@protoc_insertion_point(field_get:login_request.pwd)
  return _internal_pwd();
}
inline void login_request::_internal_set_pwd(int32_t value) {
  
  pwd_ = value;
}
inline void login_request::set_pwd(int32_t value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:login_request.pwd)
}

// -------------------------------------------------------------------

// login_reply

// int32 msg = 1;
inline void login_reply::clear_msg() {
  msg_ = 0;
}
inline int32_t login_reply::_internal_msg() const {
  return msg_;
}
inline int32_t login_reply::msg() const {
  // @@protoc_insertion_point(field_get:login_reply.msg)
  return _internal_msg();
}
inline void login_reply::_internal_set_msg(int32_t value) {
  
  msg_ = value;
}
inline void login_reply::set_msg(int32_t value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:login_reply.msg)
}

// -------------------------------------------------------------------

// regists_request

// int32 pwd = 1;
inline void regists_request::clear_pwd() {
  pwd_ = 0;
}
inline int32_t regists_request::_internal_pwd() const {
  return pwd_;
}
inline int32_t regists_request::pwd() const {
  // @@protoc_insertion_point(field_get:regists_request.pwd)
  return _internal_pwd();
}
inline void regists_request::_internal_set_pwd(int32_t value) {
  
  pwd_ = value;
}
inline void regists_request::set_pwd(int32_t value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:regists_request.pwd)
}

// int64 phone_num = 2;
inline void regists_request::clear_phone_num() {
  phone_num_ = int64_t{0};
}
inline int64_t regists_request::_internal_phone_num() const {
  return phone_num_;
}
inline int64_t regists_request::phone_num() const {
  // @@protoc_insertion_point(field_get:regists_request.phone_num)
  return _internal_phone_num();
}
inline void regists_request::_internal_set_phone_num(int64_t value) {
  
  phone_num_ = value;
}
inline void regists_request::set_phone_num(int64_t value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:regists_request.phone_num)
}

// -------------------------------------------------------------------

// regists_reply

// int32 msg = 1;
inline void regists_reply::clear_msg() {
  msg_ = 0;
}
inline int32_t regists_reply::_internal_msg() const {
  return msg_;
}
inline int32_t regists_reply::msg() const {
  // @@protoc_insertion_point(field_get:regists_reply.msg)
  return _internal_msg();
}
inline void regists_reply::_internal_set_msg(int32_t value) {
  
  msg_ = value;
}
inline void regists_reply::set_msg(int32_t value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:regists_reply.msg)
}

// -------------------------------------------------------------------

// loginout_request

// int32 id = 1;
inline void loginout_request::clear_id() {
  id_ = 0;
}
inline int32_t loginout_request::_internal_id() const {
  return id_;
}
inline int32_t loginout_request::id() const {
  // @@protoc_insertion_point(field_get:loginout_request.id)
  return _internal_id();
}
inline void loginout_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void loginout_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:loginout_request.id)
}

// -------------------------------------------------------------------

// recharge_request

// int32 id = 1;
inline void recharge_request::clear_id() {
  id_ = 0;
}
inline int32_t recharge_request::_internal_id() const {
  return id_;
}
inline int32_t recharge_request::id() const {
  // @@protoc_insertion_point(field_get:recharge_request.id)
  return _internal_id();
}
inline void recharge_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void recharge_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:recharge_request.id)
}

// int32 money = 2;
inline void recharge_request::clear_money() {
  money_ = 0;
}
inline int32_t recharge_request::_internal_money() const {
  return money_;
}
inline int32_t recharge_request::money() const {
  // @@protoc_insertion_point(field_get:recharge_request.money)
  return _internal_money();
}
inline void recharge_request::_internal_set_money(int32_t value) {
  
  money_ = value;
}
inline void recharge_request::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:recharge_request.money)
}

// int32 serial_num = 3;
inline void recharge_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t recharge_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t recharge_request::serial_num() const {
  // @@protoc_insertion_point(field_get:recharge_request.serial_num)
  return _internal_serial_num();
}
inline void recharge_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void recharge_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:recharge_request.serial_num)
}

// -------------------------------------------------------------------

// recharge_reply

// bool errno_id = 1;
inline void recharge_reply::clear_errno_id() {
  errno_id_ = false;
}
inline bool recharge_reply::_internal_errno_id() const {
  return errno_id_;
}
inline bool recharge_reply::errno_id() const {
  // @@protoc_insertion_point(field_get:recharge_reply.errno_id)
  return _internal_errno_id();
}
inline void recharge_reply::_internal_set_errno_id(bool value) {
  
  errno_id_ = value;
}
inline void recharge_reply::set_errno_id(bool value) {
  _internal_set_errno_id(value);
  // @@protoc_insertion_point(field_set:recharge_reply.errno_id)
}

// -------------------------------------------------------------------

// findpwd_request

// int32 id = 1;
inline void findpwd_request::clear_id() {
  id_ = 0;
}
inline int32_t findpwd_request::_internal_id() const {
  return id_;
}
inline int32_t findpwd_request::id() const {
  // @@protoc_insertion_point(field_get:findpwd_request.id)
  return _internal_id();
}
inline void findpwd_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void findpwd_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:findpwd_request.id)
}

// int64 phone_num = 2;
inline void findpwd_request::clear_phone_num() {
  phone_num_ = int64_t{0};
}
inline int64_t findpwd_request::_internal_phone_num() const {
  return phone_num_;
}
inline int64_t findpwd_request::phone_num() const {
  // @@protoc_insertion_point(field_get:findpwd_request.phone_num)
  return _internal_phone_num();
}
inline void findpwd_request::_internal_set_phone_num(int64_t value) {
  
  phone_num_ = value;
}
inline void findpwd_request::set_phone_num(int64_t value) {
  _internal_set_phone_num(value);
  // @@protoc_insertion_point(field_set:findpwd_request.phone_num)
}

// int32 serial_num = 3;
inline void findpwd_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t findpwd_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t findpwd_request::serial_num() const {
  // @@protoc_insertion_point(field_get:findpwd_request.serial_num)
  return _internal_serial_num();
}
inline void findpwd_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void findpwd_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:findpwd_request.serial_num)
}

// -------------------------------------------------------------------

// findpwd_reply

// int32 msg = 1;
inline void findpwd_reply::clear_msg() {
  msg_ = 0;
}
inline int32_t findpwd_reply::_internal_msg() const {
  return msg_;
}
inline int32_t findpwd_reply::msg() const {
  // @@protoc_insertion_point(field_get:findpwd_reply.msg)
  return _internal_msg();
}
inline void findpwd_reply::_internal_set_msg(int32_t value) {
  
  msg_ = value;
}
inline void findpwd_reply::set_msg(int32_t value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:findpwd_reply.msg)
}

// -------------------------------------------------------------------

// searchtickets_request

// int32 st_ar_place = 1;
inline void searchtickets_request::clear_st_ar_place() {
  st_ar_place_ = 0;
}
inline int32_t searchtickets_request::_internal_st_ar_place() const {
  return st_ar_place_;
}
inline int32_t searchtickets_request::st_ar_place() const {
  // @@protoc_insertion_point(field_get:searchtickets_request.st_ar_place)
  return _internal_st_ar_place();
}
inline void searchtickets_request::_internal_set_st_ar_place(int32_t value) {
  
  st_ar_place_ = value;
}
inline void searchtickets_request::set_st_ar_place(int32_t value) {
  _internal_set_st_ar_place(value);
  // @@protoc_insertion_point(field_set:searchtickets_request.st_ar_place)
}

// int32 day = 2;
inline void searchtickets_request::clear_day() {
  day_ = 0;
}
inline int32_t searchtickets_request::_internal_day() const {
  return day_;
}
inline int32_t searchtickets_request::day() const {
  // @@protoc_insertion_point(field_get:searchtickets_request.day)
  return _internal_day();
}
inline void searchtickets_request::_internal_set_day(int32_t value) {
  
  day_ = value;
}
inline void searchtickets_request::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:searchtickets_request.day)
}

// int32 id = 3;
inline void searchtickets_request::clear_id() {
  id_ = 0;
}
inline int32_t searchtickets_request::_internal_id() const {
  return id_;
}
inline int32_t searchtickets_request::id() const {
  // @@protoc_insertion_point(field_get:searchtickets_request.id)
  return _internal_id();
}
inline void searchtickets_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void searchtickets_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:searchtickets_request.id)
}

// int32 serial_num = 4;
inline void searchtickets_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t searchtickets_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t searchtickets_request::serial_num() const {
  // @@protoc_insertion_point(field_get:searchtickets_request.serial_num)
  return _internal_serial_num();
}
inline void searchtickets_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void searchtickets_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:searchtickets_request.serial_num)
}

// -------------------------------------------------------------------

// Pick_msg

// int32 cid = 1;
inline void Pick_msg::clear_cid() {
  cid_ = 0;
}
inline int32_t Pick_msg::_internal_cid() const {
  return cid_;
}
inline int32_t Pick_msg::cid() const {
  // @@protoc_insertion_point(field_get:Pick_msg.cid)
  return _internal_cid();
}
inline void Pick_msg::_internal_set_cid(int32_t value) {
  
  cid_ = value;
}
inline void Pick_msg::set_cid(int32_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:Pick_msg.cid)
}

// int32 st_ar_place = 2;
inline void Pick_msg::clear_st_ar_place() {
  st_ar_place_ = 0;
}
inline int32_t Pick_msg::_internal_st_ar_place() const {
  return st_ar_place_;
}
inline int32_t Pick_msg::st_ar_place() const {
  // @@protoc_insertion_point(field_get:Pick_msg.st_ar_place)
  return _internal_st_ar_place();
}
inline void Pick_msg::_internal_set_st_ar_place(int32_t value) {
  
  st_ar_place_ = value;
}
inline void Pick_msg::set_st_ar_place(int32_t value) {
  _internal_set_st_ar_place(value);
  // @@protoc_insertion_point(field_set:Pick_msg.st_ar_place)
}

// int32 st_ar_time = 3;
inline void Pick_msg::clear_st_ar_time() {
  st_ar_time_ = 0;
}
inline int32_t Pick_msg::_internal_st_ar_time() const {
  return st_ar_time_;
}
inline int32_t Pick_msg::st_ar_time() const {
  // @@protoc_insertion_point(field_get:Pick_msg.st_ar_time)
  return _internal_st_ar_time();
}
inline void Pick_msg::_internal_set_st_ar_time(int32_t value) {
  
  st_ar_time_ = value;
}
inline void Pick_msg::set_st_ar_time(int32_t value) {
  _internal_set_st_ar_time(value);
  // @@protoc_insertion_point(field_set:Pick_msg.st_ar_time)
}

// int32 price = 4;
inline void Pick_msg::clear_price() {
  price_ = 0;
}
inline int32_t Pick_msg::_internal_price() const {
  return price_;
}
inline int32_t Pick_msg::price() const {
  // @@protoc_insertion_point(field_get:Pick_msg.price)
  return _internal_price();
}
inline void Pick_msg::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void Pick_msg::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Pick_msg.price)
}

// int32 tks_left = 5;
inline void Pick_msg::clear_tks_left() {
  tks_left_ = 0;
}
inline int32_t Pick_msg::_internal_tks_left() const {
  return tks_left_;
}
inline int32_t Pick_msg::tks_left() const {
  // @@protoc_insertion_point(field_get:Pick_msg.tks_left)
  return _internal_tks_left();
}
inline void Pick_msg::_internal_set_tks_left(int32_t value) {
  
  tks_left_ = value;
}
inline void Pick_msg::set_tks_left(int32_t value) {
  _internal_set_tks_left(value);
  // @@protoc_insertion_point(field_set:Pick_msg.tks_left)
}

// -------------------------------------------------------------------

// searchtickets_reply

// repeated .Pick_msg tickets = 2;
inline int searchtickets_reply::_internal_tickets_size() const {
  return tickets_.size();
}
inline int searchtickets_reply::tickets_size() const {
  return _internal_tickets_size();
}
inline void searchtickets_reply::clear_tickets() {
  tickets_.Clear();
}
inline ::Pick_msg* searchtickets_reply::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:searchtickets_reply.tickets)
  return tickets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg >*
searchtickets_reply::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:searchtickets_reply.tickets)
  return &tickets_;
}
inline const ::Pick_msg& searchtickets_reply::_internal_tickets(int index) const {
  return tickets_.Get(index);
}
inline const ::Pick_msg& searchtickets_reply::tickets(int index) const {
  // @@protoc_insertion_point(field_get:searchtickets_reply.tickets)
  return _internal_tickets(index);
}
inline ::Pick_msg* searchtickets_reply::_internal_add_tickets() {
  return tickets_.Add();
}
inline ::Pick_msg* searchtickets_reply::add_tickets() {
  ::Pick_msg* _add = _internal_add_tickets();
  // @@protoc_insertion_point(field_add:searchtickets_reply.tickets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg >&
searchtickets_reply::tickets() const {
  // @@protoc_insertion_point(field_list:searchtickets_reply.tickets)
  return tickets_;
}

// -------------------------------------------------------------------

// bookticket_request

// int32 id = 1;
inline void bookticket_request::clear_id() {
  id_ = 0;
}
inline int32_t bookticket_request::_internal_id() const {
  return id_;
}
inline int32_t bookticket_request::id() const {
  // @@protoc_insertion_point(field_get:bookticket_request.id)
  return _internal_id();
}
inline void bookticket_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void bookticket_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bookticket_request.id)
}

// int32 cid = 2;
inline void bookticket_request::clear_cid() {
  cid_ = 0;
}
inline int32_t bookticket_request::_internal_cid() const {
  return cid_;
}
inline int32_t bookticket_request::cid() const {
  // @@protoc_insertion_point(field_get:bookticket_request.cid)
  return _internal_cid();
}
inline void bookticket_request::_internal_set_cid(int32_t value) {
  
  cid_ = value;
}
inline void bookticket_request::set_cid(int32_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:bookticket_request.cid)
}

// int32 hope_col = 3;
inline void bookticket_request::clear_hope_col() {
  hope_col_ = 0;
}
inline int32_t bookticket_request::_internal_hope_col() const {
  return hope_col_;
}
inline int32_t bookticket_request::hope_col() const {
  // @@protoc_insertion_point(field_get:bookticket_request.hope_col)
  return _internal_hope_col();
}
inline void bookticket_request::_internal_set_hope_col(int32_t value) {
  
  hope_col_ = value;
}
inline void bookticket_request::set_hope_col(int32_t value) {
  _internal_set_hope_col(value);
  // @@protoc_insertion_point(field_set:bookticket_request.hope_col)
}

// int32 serial_num = 4;
inline void bookticket_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t bookticket_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t bookticket_request::serial_num() const {
  // @@protoc_insertion_point(field_get:bookticket_request.serial_num)
  return _internal_serial_num();
}
inline void bookticket_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void bookticket_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:bookticket_request.serial_num)
}

// -------------------------------------------------------------------

// bookticket_reply

// int32 msg = 1;
inline void bookticket_reply::clear_msg() {
  msg_ = 0;
}
inline int32_t bookticket_reply::_internal_msg() const {
  return msg_;
}
inline int32_t bookticket_reply::msg() const {
  // @@protoc_insertion_point(field_get:bookticket_reply.msg)
  return _internal_msg();
}
inline void bookticket_reply::_internal_set_msg(int32_t value) {
  
  msg_ = value;
}
inline void bookticket_reply::set_msg(int32_t value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:bookticket_reply.msg)
}

// -------------------------------------------------------------------

// cancelticket_request

// int32 id = 1;
inline void cancelticket_request::clear_id() {
  id_ = 0;
}
inline int32_t cancelticket_request::_internal_id() const {
  return id_;
}
inline int32_t cancelticket_request::id() const {
  // @@protoc_insertion_point(field_get:cancelticket_request.id)
  return _internal_id();
}
inline void cancelticket_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void cancelticket_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:cancelticket_request.id)
}

// int32 cid = 2;
inline void cancelticket_request::clear_cid() {
  cid_ = 0;
}
inline int32_t cancelticket_request::_internal_cid() const {
  return cid_;
}
inline int32_t cancelticket_request::cid() const {
  // @@protoc_insertion_point(field_get:cancelticket_request.cid)
  return _internal_cid();
}
inline void cancelticket_request::_internal_set_cid(int32_t value) {
  
  cid_ = value;
}
inline void cancelticket_request::set_cid(int32_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:cancelticket_request.cid)
}

// int32 site = 3;
inline void cancelticket_request::clear_site() {
  site_ = 0;
}
inline int32_t cancelticket_request::_internal_site() const {
  return site_;
}
inline int32_t cancelticket_request::site() const {
  // @@protoc_insertion_point(field_get:cancelticket_request.site)
  return _internal_site();
}
inline void cancelticket_request::_internal_set_site(int32_t value) {
  
  site_ = value;
}
inline void cancelticket_request::set_site(int32_t value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:cancelticket_request.site)
}

// int32 serial_num = 4;
inline void cancelticket_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t cancelticket_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t cancelticket_request::serial_num() const {
  // @@protoc_insertion_point(field_get:cancelticket_request.serial_num)
  return _internal_serial_num();
}
inline void cancelticket_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void cancelticket_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:cancelticket_request.serial_num)
}

// int32 room = 5;
inline void cancelticket_request::clear_room() {
  room_ = 0;
}
inline int32_t cancelticket_request::_internal_room() const {
  return room_;
}
inline int32_t cancelticket_request::room() const {
  // @@protoc_insertion_point(field_get:cancelticket_request.room)
  return _internal_room();
}
inline void cancelticket_request::_internal_set_room(int32_t value) {
  
  room_ = value;
}
inline void cancelticket_request::set_room(int32_t value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:cancelticket_request.room)
}

// -------------------------------------------------------------------

// cancelticket_reply

// int32 errno_id = 1;
inline void cancelticket_reply::clear_errno_id() {
  errno_id_ = 0;
}
inline int32_t cancelticket_reply::_internal_errno_id() const {
  return errno_id_;
}
inline int32_t cancelticket_reply::errno_id() const {
  // @@protoc_insertion_point(field_get:cancelticket_reply.errno_id)
  return _internal_errno_id();
}
inline void cancelticket_reply::_internal_set_errno_id(int32_t value) {
  
  errno_id_ = value;
}
inline void cancelticket_reply::set_errno_id(int32_t value) {
  _internal_set_errno_id(value);
  // @@protoc_insertion_point(field_set:cancelticket_reply.errno_id)
}

// -------------------------------------------------------------------

// personbook_request

// int32 id = 1;
inline void personbook_request::clear_id() {
  id_ = 0;
}
inline int32_t personbook_request::_internal_id() const {
  return id_;
}
inline int32_t personbook_request::id() const {
  // @@protoc_insertion_point(field_get:personbook_request.id)
  return _internal_id();
}
inline void personbook_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void personbook_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:personbook_request.id)
}

// int32 serial_num = 2;
inline void personbook_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t personbook_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t personbook_request::serial_num() const {
  // @@protoc_insertion_point(field_get:personbook_request.serial_num)
  return _internal_serial_num();
}
inline void personbook_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void personbook_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:personbook_request.serial_num)
}

// -------------------------------------------------------------------

// Pick_msg2

// int32 cid = 1;
inline void Pick_msg2::clear_cid() {
  cid_ = 0;
}
inline int32_t Pick_msg2::_internal_cid() const {
  return cid_;
}
inline int32_t Pick_msg2::cid() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.cid)
  return _internal_cid();
}
inline void Pick_msg2::_internal_set_cid(int32_t value) {
  
  cid_ = value;
}
inline void Pick_msg2::set_cid(int32_t value) {
  _internal_set_cid(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.cid)
}

// int32 st_ar_place = 2;
inline void Pick_msg2::clear_st_ar_place() {
  st_ar_place_ = 0;
}
inline int32_t Pick_msg2::_internal_st_ar_place() const {
  return st_ar_place_;
}
inline int32_t Pick_msg2::st_ar_place() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.st_ar_place)
  return _internal_st_ar_place();
}
inline void Pick_msg2::_internal_set_st_ar_place(int32_t value) {
  
  st_ar_place_ = value;
}
inline void Pick_msg2::set_st_ar_place(int32_t value) {
  _internal_set_st_ar_place(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.st_ar_place)
}

// int32 day = 3;
inline void Pick_msg2::clear_day() {
  day_ = 0;
}
inline int32_t Pick_msg2::_internal_day() const {
  return day_;
}
inline int32_t Pick_msg2::day() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.day)
  return _internal_day();
}
inline void Pick_msg2::_internal_set_day(int32_t value) {
  
  day_ = value;
}
inline void Pick_msg2::set_day(int32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.day)
}

// int32 st_ar_time = 4;
inline void Pick_msg2::clear_st_ar_time() {
  st_ar_time_ = 0;
}
inline int32_t Pick_msg2::_internal_st_ar_time() const {
  return st_ar_time_;
}
inline int32_t Pick_msg2::st_ar_time() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.st_ar_time)
  return _internal_st_ar_time();
}
inline void Pick_msg2::_internal_set_st_ar_time(int32_t value) {
  
  st_ar_time_ = value;
}
inline void Pick_msg2::set_st_ar_time(int32_t value) {
  _internal_set_st_ar_time(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.st_ar_time)
}

// int32 price = 5;
inline void Pick_msg2::clear_price() {
  price_ = 0;
}
inline int32_t Pick_msg2::_internal_price() const {
  return price_;
}
inline int32_t Pick_msg2::price() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.price)
  return _internal_price();
}
inline void Pick_msg2::_internal_set_price(int32_t value) {
  
  price_ = value;
}
inline void Pick_msg2::set_price(int32_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.price)
}

// int32 site = 6;
inline void Pick_msg2::clear_site() {
  site_ = 0;
}
inline int32_t Pick_msg2::_internal_site() const {
  return site_;
}
inline int32_t Pick_msg2::site() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.site)
  return _internal_site();
}
inline void Pick_msg2::_internal_set_site(int32_t value) {
  
  site_ = value;
}
inline void Pick_msg2::set_site(int32_t value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.site)
}

// bool iscancel = 7;
inline void Pick_msg2::clear_iscancel() {
  iscancel_ = false;
}
inline bool Pick_msg2::_internal_iscancel() const {
  return iscancel_;
}
inline bool Pick_msg2::iscancel() const {
  // @@protoc_insertion_point(field_get:Pick_msg2.iscancel)
  return _internal_iscancel();
}
inline void Pick_msg2::_internal_set_iscancel(bool value) {
  
  iscancel_ = value;
}
inline void Pick_msg2::set_iscancel(bool value) {
  _internal_set_iscancel(value);
  // @@protoc_insertion_point(field_set:Pick_msg2.iscancel)
}

// -------------------------------------------------------------------

// personbook_reply

// bool errno_id = 1;
inline void personbook_reply::clear_errno_id() {
  errno_id_ = false;
}
inline bool personbook_reply::_internal_errno_id() const {
  return errno_id_;
}
inline bool personbook_reply::errno_id() const {
  // @@protoc_insertion_point(field_get:personbook_reply.errno_id)
  return _internal_errno_id();
}
inline void personbook_reply::_internal_set_errno_id(bool value) {
  
  errno_id_ = value;
}
inline void personbook_reply::set_errno_id(bool value) {
  _internal_set_errno_id(value);
  // @@protoc_insertion_point(field_set:personbook_reply.errno_id)
}

// repeated .Pick_msg2 tickets = 2;
inline int personbook_reply::_internal_tickets_size() const {
  return tickets_.size();
}
inline int personbook_reply::tickets_size() const {
  return _internal_tickets_size();
}
inline void personbook_reply::clear_tickets() {
  tickets_.Clear();
}
inline ::Pick_msg2* personbook_reply::mutable_tickets(int index) {
  // @@protoc_insertion_point(field_mutable:personbook_reply.tickets)
  return tickets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg2 >*
personbook_reply::mutable_tickets() {
  // @@protoc_insertion_point(field_mutable_list:personbook_reply.tickets)
  return &tickets_;
}
inline const ::Pick_msg2& personbook_reply::_internal_tickets(int index) const {
  return tickets_.Get(index);
}
inline const ::Pick_msg2& personbook_reply::tickets(int index) const {
  // @@protoc_insertion_point(field_get:personbook_reply.tickets)
  return _internal_tickets(index);
}
inline ::Pick_msg2* personbook_reply::_internal_add_tickets() {
  return tickets_.Add();
}
inline ::Pick_msg2* personbook_reply::add_tickets() {
  ::Pick_msg2* _add = _internal_add_tickets();
  // @@protoc_insertion_point(field_add:personbook_reply.tickets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Pick_msg2 >&
personbook_reply::tickets() const {
  // @@protoc_insertion_point(field_list:personbook_reply.tickets)
  return tickets_;
}

// -------------------------------------------------------------------

// citymodel_request

// int32 id = 1;
inline void citymodel_request::clear_id() {
  id_ = 0;
}
inline int32_t citymodel_request::_internal_id() const {
  return id_;
}
inline int32_t citymodel_request::id() const {
  // @@protoc_insertion_point(field_get:citymodel_request.id)
  return _internal_id();
}
inline void citymodel_request::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void citymodel_request::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:citymodel_request.id)
}

// int32 serial_num = 2;
inline void citymodel_request::clear_serial_num() {
  serial_num_ = 0;
}
inline int32_t citymodel_request::_internal_serial_num() const {
  return serial_num_;
}
inline int32_t citymodel_request::serial_num() const {
  // @@protoc_insertion_point(field_get:citymodel_request.serial_num)
  return _internal_serial_num();
}
inline void citymodel_request::_internal_set_serial_num(int32_t value) {
  
  serial_num_ = value;
}
inline void citymodel_request::set_serial_num(int32_t value) {
  _internal_set_serial_num(value);
  // @@protoc_insertion_point(field_set:citymodel_request.serial_num)
}

// -------------------------------------------------------------------

// citymodel_reply

// string msg = 1;
inline void citymodel_reply::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& citymodel_reply::msg() const {
  // @@protoc_insertion_point(field_get:citymodel_reply.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void citymodel_reply::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:citymodel_reply.msg)
}
inline std::string* citymodel_reply::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:citymodel_reply.msg)
  return _s;
}
inline const std::string& citymodel_reply::_internal_msg() const {
  return msg_.Get();
}
inline void citymodel_reply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* citymodel_reply::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* citymodel_reply::release_msg() {
  // @@protoc_insertion_point(field_release:citymodel_reply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void citymodel_reply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:citymodel_reply.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
